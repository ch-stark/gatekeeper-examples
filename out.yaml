apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    env: prod
  name: gatekeeper-placement-binding
  namespace: policies
placementRef:
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
  name: gatekeeper-placement
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: policy-install-gatekeeper
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: policy-check-gatekeeper
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: policy-gatekeeperlibrary
- apiGroup: policy.open-cluster-management.io
  kind: Policy
  name: policy-applyconstraints
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    env: prod
  name: policy-applyconstraints
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-check-gatekeeper
    namespace: policies
  disabled: false
  policy-templates:
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-applyconstraints
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Restricts any ArgoCD Applications to be created in default
                  ArgoCD project
              name: k8snoappindefaultargoproject
            spec:
              crd:
                spec:
                  names:
                    kind: K8sNoAppInDefaultArgoProject
              targets:
              - rego: |
                  package k8snoappindefaultargoproject
                  violation[{"msg": def_msg}] {
                    name := input.review.object.metadata.name
                    mySpec := input.review.object.spec
                    mySpec.project == "default"
                    def_msg := sprintf("Error: `%v` ArgoCD Application is not permitted to use default ArgoCD project.",[name])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: constraints.gatekeeper.sh/v1beta1
            kind: K8sNoAppInDefaultArgoProject
            metadata:
              name: no-app-in-default-argo-project
            spec:
              enforcementAction: deny
              match:
                kinds:
                - apiGroups:
                  - argoproj.io/v1alpha1
                  kinds:
                  - Application
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: inform-gatekeeper-audit-no-app-in-default-argo-project
      spec:
        namespaceSelector:
          exclude:
          - kube-*
          include:
          - '*'
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: constraints.gatekeeper.sh/v1beta1
            kind: K8sNoAppInDefaultArgoProject
            metadata:
              name: no-app-in-default-argo-project
            status:
              totalViolations: 0
        remediationAction: inform
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: inform-gatekeeper-admission-no-app-in-default-argo-project
      spec:
        namespaceSelector:
          exclude:
          - kube-*
          include:
          - '*'
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            annotations:
              constraint_action: deny
              constraint_kind: K8sNoAppInDefaultArgoProject
              constraint_name: no-app-in-default-argo-project
              event_type: violation
            apiVersion: v1
            kind: Event
        remediationAction: inform
        severity: medium
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    env: prod
  name: policy-check-gatekeeper
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-check-gatekeeper
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                control-plane: audit-controller
              namespace: gatekeeper-system
            status:
              phase: Running
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                control-plane: controller-manager
              namespace: gatekeeper-system
            status:
              phase: Running
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    env: prod
  name: policy-gatekeeperlibrary
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-configure-gatekeeper
    namespace: policies
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-check-gatekeeper
    namespace: policies
  disabled: false
  policy-templates:
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-gatekeeperlibrary
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires container images to begin with a string from
                  the specified list.
                metadata.gatekeeper.sh/title: Allowed Repositories
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sallowedrepos
            spec:
              crd:
                spec:
                  names:
                    kind: K8sAllowedRepos
                  validation:
                    openAPIV3Schema:
                      properties:
                        repos:
                          description: The list of prefixes a container image is allowed
                            to have.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8sallowedrepos

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.containers[_]
                    satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
                    not any(satisfied)
                    msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.initContainers[_]
                    satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
                    not any(satisfied)
                    msg := sprintf("initContainer <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.ephemeralContainers[_]
                    satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
                    not any(satisfied)
                    msg := sprintf("ephemeralContainer <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the ability of any Pod to enable automountServiceAccountToken.
                metadata.gatekeeper.sh/title: Automount Service Account Token for
                  Pod
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspautomountserviceaccounttokenpod
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPAutomountServiceAccountTokenPod
                  validation:
                    openAPIV3Schema:
                      description: Controls the ability of any Pod to enable automountServiceAccountToken.
                      type: object
              targets:
              - rego: |
                  package k8sautomountserviceaccounttoken

                  violation[{"msg": msg}] {
                      obj := input.review.object
                      mountServiceAccountToken(obj.spec)
                      msg := sprintf("Automounting service account token is disallowed, pod: %v", [obj.metadata.name])
                  }

                  mountServiceAccountToken(spec) {
                      spec.automountServiceAccountToken == true
                  }

                  # if there is no automountServiceAccountToken spec, check on volumeMount in containers. Service Account token is mounted on /var/run/secrets/kubernetes.io/serviceaccount
                  # https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#serviceaccount-admission-controller
                  mountServiceAccountToken(spec) {
                      not has_key(spec, "automountServiceAccountToken")
                      "/var/run/secrets/kubernetes.io/serviceaccount" == input_containers[_].volumeMounts[_].mountPath
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }

                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }

                  # Ephemeral containers not checked as it is not possible to set field.

                  has_key(x, k) {
                      _ = x[k]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Many Kubernetes installations by default have a system:aggregate-to-edit ClusterRole which does not properly restrict access to editing Endpoints. This ConstraintTemplate forbids the system:aggregate-to-edit ClusterRole from granting permission to create/patch/update Endpoints.
                  ClusterRole/system:aggregate-to-edit should not allow Endpoint edit permissions due to CVE-2021-25740, Endpoint & EndpointSlice permissions allow cross-Namespace forwarding, https://github.com/kubernetes/kubernetes/issues/103675
                metadata.gatekeeper.sh/title: Block Endpoint Edit Default Role
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sblockendpointeditdefaultrole
            spec:
              crd:
                spec:
                  names:
                    kind: K8sBlockEndpointEditDefaultRole
              targets:
              - rego: |
                  package k8sblockendpointeditdefaultrole

                  violation[{"msg": msg}] {
                      input.review.object.metadata.name == "system:aggregate-to-edit"
                      endpointRule(input.review.object.rules[_])
                      msg := "ClusterRole system:aggregate-to-edit should not allow endpoint edit permissions. For k8s version < 1.22, the Cluster Role should be annotated with rbac.authorization.kubernetes.io/autoupdate=false to prevent autoreconciliation back to default permissions for this role."
                  }

                  endpointRule(rule) {
                      "endpoints" == rule.resources[_]
                      hasEditVerb(rule.verbs)
                  }

                  hasEditVerb(verbs) {
                      "create" == verbs[_]
                  }

                  hasEditVerb(verbs) {
                      "patch" == verbs[_]
                  }

                  hasEditVerb(verbs) {
                      "update" == verbs[_]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Disallows all Services with type LoadBalancer.
                  https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
                metadata.gatekeeper.sh/title: Block Services with type LoadBalancer
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sblockloadbalancer
            spec:
              crd:
                spec:
                  names:
                    kind: K8sBlockLoadBalancer
              targets:
              - rego: |
                  package k8sblockloadbalancer

                  violation[{"msg": msg}] {
                    input.review.kind.kind == "Service"
                    input.review.object.spec.type == "LoadBalancer"
                    msg := "User is not allowed to create service of type LoadBalancer"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Disallows all Services with type NodePort.
                  https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
                metadata.gatekeeper.sh/title: Block NodePort
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sblocknodeport
            spec:
              crd:
                spec:
                  names:
                    kind: K8sBlockNodePort
              targets:
              - rego: |
                  package k8sblocknodeport

                  violation[{"msg": msg}] {
                    input.review.kind.kind == "Service"
                    input.review.object.spec.type == "NodePort"
                    msg := "User is not allowed to create service of type NodePort"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Users should not be able to create Ingresses with a blank
                  or wildcard (*) hostname since that would enable them to intercept
                  traffic for other services in the cluster, even if they don't have
                  access to those services.
                metadata.gatekeeper.sh/title: Block Wildcard Ingress
                metadata.gatekeeper.sh/version: 1.0.1
              name: k8sblockwildcardingress
            spec:
              crd:
                spec:
                  names:
                    kind: K8sBlockWildcardIngress
              targets:
              - rego: |
                  package K8sBlockWildcardIngress

                  contains_wildcard(hostname) = true {
                    hostname == ""
                  }

                  contains_wildcard(hostname) = true {
                    contains(hostname, "*")
                  }

                  violation[{"msg": msg}] {
                    input.review.kind.kind == "Ingress"
                    # object.get is required to detect omitted host fields
                    hostname := object.get(input.review.object.spec.rules[_], "host", "")
                    contains_wildcard(hostname)
                    msg := sprintf("Hostname '%v' is not allowed since it counts as a wildcard, which can be used to intercept traffic from other applications.", [hostname])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires containers to have memory and CPU limits set and constrains limits to be within the specified maximum values.
                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                metadata.gatekeeper.sh/title: Container Limits
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8scontainerlimits
            spec:
              crd:
                spec:
                  names:
                    kind: K8sContainerLimits
                  validation:
                    openAPIV3Schema:
                      properties:
                        cpu:
                          description: The maximum allowed cpu limit on a Pod, exclusive.
                          type: string
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        memory:
                          description: The maximum allowed memory limit on a Pod,
                            exclusive.
                          type: string
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8scontainerlimits

                  import data.lib.exempt_container.is_exempt

                  missing(obj, field) = true {
                    not obj[field]
                  }

                  missing(obj, field) = true {
                    obj[field] == ""
                  }

                  canonify_cpu(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    endswith(orig, "m")
                    new := to_number(replace(orig, "m", ""))
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    not endswith(orig, "m")
                    re_match("^[0-9]+(\\.[0-9]+)?$", orig)
                    new := to_number(orig) * 1000
                  }

                  # 10 ** 21
                  mem_multiple("E") = 1000000000000000000000 { true }

                  # 10 ** 18
                  mem_multiple("P") = 1000000000000000000 { true }

                  # 10 ** 15
                  mem_multiple("T") = 1000000000000000 { true }

                  # 10 ** 12
                  mem_multiple("G") = 1000000000000 { true }

                  # 10 ** 9
                  mem_multiple("M") = 1000000000 { true }

                  # 10 ** 6
                  mem_multiple("k") = 1000000 { true }

                  # 10 ** 3
                  mem_multiple("") = 1000 { true }

                  # Kubernetes accepts millibyte precision when it probably shouldn't.
                  # https://github.com/kubernetes/kubernetes/issues/28741
                  # 10 ** 0
                  mem_multiple("m") = 1 { true }

                  # 1000 * 2 ** 10
                  mem_multiple("Ki") = 1024000 { true }

                  # 1000 * 2 ** 20
                  mem_multiple("Mi") = 1048576000 { true }

                  # 1000 * 2 ** 30
                  mem_multiple("Gi") = 1073741824000 { true }

                  # 1000 * 2 ** 40
                  mem_multiple("Ti") = 1099511627776000 { true }

                  # 1000 * 2 ** 50
                  mem_multiple("Pi") = 1125899906842624000 { true }

                  # 1000 * 2 ** 60
                  mem_multiple("Ei") = 1152921504606846976000 { true }

                  get_suffix(mem) = suffix {
                    not is_string(mem)
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 0
                    suffix := substring(mem, count(mem) - 1, -1)
                    mem_multiple(suffix)
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 1
                    suffix := substring(mem, count(mem) - 2, -1)
                    mem_multiple(suffix)
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 1
                    not mem_multiple(substring(mem, count(mem) - 1, -1))
                    not mem_multiple(substring(mem, count(mem) - 2, -1))
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) == 1
                    not mem_multiple(substring(mem, count(mem) - 1, -1))
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) == 0
                    suffix := ""
                  }

                  canonify_mem(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_mem(orig) = new {
                    not is_number(orig)
                    suffix := get_suffix(orig)
                    raw := replace(orig, suffix, "")
                    re_match("^[0-9]+(\\.[0-9]+)?$", raw)
                    new := to_number(raw) * mem_multiple(suffix)
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "containers"}]
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "initContainers"}]
                  }

                  # Ephemeral containers not checked as it is not possible to set field.

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_orig := container.resources.limits.cpu
                    not canonify_cpu(cpu_orig)
                    msg := sprintf("container <%v> cpu limit <%v> could not be parsed", [container.name, cpu_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_orig := container.resources.limits.memory
                    not canonify_mem(mem_orig)
                    msg := sprintf("container <%v> memory limit <%v> could not be parsed", [container.name, mem_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources
                    msg := sprintf("container <%v> has no resource limits", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources.limits
                    msg := sprintf("container <%v> has no resource limits", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.limits, "cpu")
                    msg := sprintf("container <%v> has no cpu limit", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.limits, "memory")
                    msg := sprintf("container <%v> has no memory limit", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_orig := container.resources.limits.cpu
                    cpu := canonify_cpu(cpu_orig)
                    max_cpu_orig := input.parameters.cpu
                    max_cpu := canonify_cpu(max_cpu_orig)
                    cpu > max_cpu
                    msg := sprintf("container <%v> cpu limit <%v> is higher than the maximum allowed of <%v>", [container.name, cpu_orig, max_cpu_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_orig := container.resources.limits.memory
                    mem := canonify_mem(mem_orig)
                    max_mem_orig := input.parameters.memory
                    max_mem := canonify_mem(max_mem_orig)
                    mem > max_mem
                    msg := sprintf("container <%v> memory limit <%v> is higher than the maximum allowed of <%v>", [container.name, mem_orig, max_mem_orig])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires containers to have memory and CPU requests set and constrains requests to be within the specified maximum values.
                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                metadata.gatekeeper.sh/title: Container Requests
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8scontainerrequests
            spec:
              crd:
                spec:
                  names:
                    kind: K8sContainerRequests
                  validation:
                    openAPIV3Schema:
                      properties:
                        cpu:
                          description: The maximum allowed cpu request on a Pod, exclusive.
                          type: string
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        memory:
                          description: The maximum allowed memory request on a Pod,
                            exclusive.
                          type: string
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8scontainerrequests

                  import data.lib.exempt_container.is_exempt

                  missing(obj, field) = true {
                    not obj[field]
                  }

                  missing(obj, field) = true {
                    obj[field] == ""
                  }

                  canonify_cpu(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    endswith(orig, "m")
                    new := to_number(replace(orig, "m", ""))
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    not endswith(orig, "m")
                    re_match("^[0-9]+(\\.[0-9]+)?$", orig)
                    new := to_number(orig) * 1000
                  }

                  # 10 ** 21
                  mem_multiple("E") = 1000000000000000000000 { true }

                  # 10 ** 18
                  mem_multiple("P") = 1000000000000000000 { true }

                  # 10 ** 15
                  mem_multiple("T") = 1000000000000000 { true }

                  # 10 ** 12
                  mem_multiple("G") = 1000000000000 { true }

                  # 10 ** 9
                  mem_multiple("M") = 1000000000 { true }

                  # 10 ** 6
                  mem_multiple("k") = 1000000 { true }

                  # 10 ** 3
                  mem_multiple("") = 1000 { true }

                  # Kubernetes accepts millibyte precision when it probably shouldn't.
                  # https://github.com/kubernetes/kubernetes/issues/28741
                  # 10 ** 0
                  mem_multiple("m") = 1 { true }

                  # 1000 * 2 ** 10
                  mem_multiple("Ki") = 1024000 { true }

                  # 1000 * 2 ** 20
                  mem_multiple("Mi") = 1048576000 { true }

                  # 1000 * 2 ** 30
                  mem_multiple("Gi") = 1073741824000 { true }

                  # 1000 * 2 ** 40
                  mem_multiple("Ti") = 1099511627776000 { true }

                  # 1000 * 2 ** 50
                  mem_multiple("Pi") = 1125899906842624000 { true }

                  # 1000 * 2 ** 60
                  mem_multiple("Ei") = 1152921504606846976000 { true }

                  get_suffix(mem) = suffix {
                    not is_string(mem)
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 0
                    suffix := substring(mem, count(mem) - 1, -1)
                    mem_multiple(suffix)
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 1
                    suffix := substring(mem, count(mem) - 2, -1)
                    mem_multiple(suffix)
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 1
                    not mem_multiple(substring(mem, count(mem) - 1, -1))
                    not mem_multiple(substring(mem, count(mem) - 2, -1))
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) == 1
                    not mem_multiple(substring(mem, count(mem) - 1, -1))
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) == 0
                    suffix := ""
                  }

                  canonify_mem(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_mem(orig) = new {
                    not is_number(orig)
                    suffix := get_suffix(orig)
                    raw := replace(orig, suffix, "")
                    re_match("^[0-9]+(\\.[0-9]+)?$", raw)
                    new := to_number(raw) * mem_multiple(suffix)
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "containers"}]
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "initContainers"}]
                  }

                  # Ephemeral containers not checked as it is not possible to set field.

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_orig := container.resources.requests.cpu
                    not canonify_cpu(cpu_orig)
                    msg := sprintf("container <%v> cpu request <%v> could not be parsed", [container.name, cpu_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_orig := container.resources.requests.memory
                    not canonify_mem(mem_orig)
                    msg := sprintf("container <%v> memory request <%v> could not be parsed", [container.name, mem_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources
                    msg := sprintf("container <%v> has no resource requests", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources.requests
                    msg := sprintf("container <%v> has no resource requests", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.requests, "cpu")
                    msg := sprintf("container <%v> has no cpu request", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.requests, "memory")
                    msg := sprintf("container <%v> has no memory request", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_orig := container.resources.requests.cpu
                    cpu := canonify_cpu(cpu_orig)
                    max_cpu_orig := input.parameters.cpu
                    max_cpu := canonify_cpu(max_cpu_orig)
                    cpu > max_cpu
                    msg := sprintf("container <%v> cpu request <%v> is higher than the maximum allowed of <%v>", [container.name, cpu_orig, max_cpu_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_orig := container.resources.requests.memory
                    mem := canonify_mem(mem_orig)
                    max_mem_orig := input.parameters.memory
                    max_mem := canonify_mem(max_mem_orig)
                    mem > max_mem
                    msg := sprintf("container <%v> memory request <%v> is higher than the maximum allowed of <%v>", [container.name, mem_orig, max_mem_orig])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Sets a maximum ratio for container resource limits to requests.
                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                metadata.gatekeeper.sh/title: Container Ratios
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8scontainerratios
            spec:
              crd:
                spec:
                  names:
                    kind: K8sContainerRatios
                  validation:
                    openAPIV3Schema:
                      properties:
                        cpuRatio:
                          description: The maximum allowed ratio of `resources.limits.cpu`
                            to `resources.requests.cpu` on a container. If not specified,
                            equal to `ratio`.
                          type: string
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        ratio:
                          description: The maximum allowed ratio of `resources.limits`
                            to `resources.requests` on a container.
                          type: string
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8scontainerratios

                  import data.lib.exempt_container.is_exempt

                  missing(obj, field) = true {
                    not obj[field]
                  }

                  missing(obj, field) = true {
                    obj[field] == ""
                  }

                  canonify_cpu(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    endswith(orig, "m")
                    new := to_number(replace(orig, "m", ""))
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    not endswith(orig, "m")
                    re_match("^[0-9]+$", orig)
                    new := to_number(orig) * 1000
                  }

                  canonify_cpu(orig) = new {
                    not is_number(orig)
                    not endswith(orig, "m")
                    re_match("^[0-9]+[.][0-9]+$", orig)
                    new := to_number(orig) * 1000
                  }

                  # 10 ** 21
                  mem_multiple("E") = 1000000000000000000000 { true }

                  # 10 ** 18
                  mem_multiple("P") = 1000000000000000000 { true }

                  # 10 ** 15
                  mem_multiple("T") = 1000000000000000 { true }

                  # 10 ** 12
                  mem_multiple("G") = 1000000000000 { true }

                  # 10 ** 9
                  mem_multiple("M") = 1000000000 { true }

                  # 10 ** 6
                  mem_multiple("k") = 1000000 { true }

                  # 10 ** 3
                  mem_multiple("") = 1000 { true }

                  # Kubernetes accepts millibyte precision when it probably shouldn't.
                  # https://github.com/kubernetes/kubernetes/issues/28741
                  # 10 ** 0
                  mem_multiple("m") = 1 { true }

                  # 1000 * 2 ** 10
                  mem_multiple("Ki") = 1024000 { true }

                  # 1000 * 2 ** 20
                  mem_multiple("Mi") = 1048576000 { true }

                  # 1000 * 2 ** 30
                  mem_multiple("Gi") = 1073741824000 { true }

                  # 1000 * 2 ** 40
                  mem_multiple("Ti") = 1099511627776000 { true }

                  # 1000 * 2 ** 50
                  mem_multiple("Pi") = 1125899906842624000 { true }

                  # 1000 * 2 ** 60
                  mem_multiple("Ei") = 1152921504606846976000 { true }

                  get_suffix(mem) = suffix {
                    not is_string(mem)
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 0
                    suffix := substring(mem, count(mem) - 1, -1)
                    mem_multiple(suffix)
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 1
                    suffix := substring(mem, count(mem) - 2, -1)
                    mem_multiple(suffix)
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) > 1
                    not mem_multiple(substring(mem, count(mem) - 1, -1))
                    not mem_multiple(substring(mem, count(mem) - 2, -1))
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) == 1
                    not mem_multiple(substring(mem, count(mem) - 1, -1))
                    suffix := ""
                  }

                  get_suffix(mem) = suffix {
                    is_string(mem)
                    count(mem) == 0
                    suffix := ""
                  }

                  canonify_mem(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_mem(orig) = new {
                    not is_number(orig)
                    suffix := get_suffix(orig)
                    raw := replace(orig, suffix, "")
                    re_match("^[0-9]+(\\.[0-9]+)?$", raw)
                    new := to_number(raw) * mem_multiple(suffix)
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "containers"}]
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "initContainers"}]
                  }

                  # Ephemeral containers not checked as it is not possible to set field.

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_orig := container.resources.limits.cpu
                    not canonify_cpu(cpu_orig)
                    msg := sprintf("container <%v> cpu limit <%v> could not be parsed", [container.name, cpu_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_orig := container.resources.limits.memory
                    not canonify_mem(mem_orig)
                    msg := sprintf("container <%v> memory limit <%v> could not be parsed", [container.name, mem_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_orig := container.resources.requests.cpu
                    not canonify_cpu(cpu_orig)
                    msg := sprintf("container <%v> cpu request <%v> could not be parsed", [container.name, cpu_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_orig := container.resources.requests.memory
                    not canonify_mem(mem_orig)
                    msg := sprintf("container <%v> memory request <%v> could not be parsed", [container.name, mem_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources
                    msg := sprintf("container <%v> has no resource limits", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources.limits
                    msg := sprintf("container <%v> has no resource limits", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.limits, "cpu")
                    msg := sprintf("container <%v> has no cpu limit", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.limits, "memory")
                    msg := sprintf("container <%v> has no memory limit", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources.requests
                    msg := sprintf("container <%v> has no resource requests", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.requests, "cpu")
                    msg := sprintf("container <%v> has no cpu request", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.requests, "memory")
                    msg := sprintf("container <%v> has no memory request", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    cpu_limits_orig := container.resources.limits.cpu
                    cpu_limits := canonify_cpu(cpu_limits_orig)
                    cpu_requests_orig := container.resources.requests.cpu
                    cpu_requests := canonify_cpu(cpu_requests_orig)
                    cpu_ratio := object.get(input.parameters, "cpuRatio", input.parameters.ratio)
                    to_number(cpu_limits) > to_number(cpu_ratio) * to_number(cpu_requests)
                    msg := sprintf("container <%v> cpu limit <%v> is higher than the maximum allowed ratio of <%v>", [container.name, cpu_limits_orig, cpu_ratio])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    mem_limits_orig := container.resources.limits.memory
                    mem_requests_orig := container.resources.requests.memory
                    mem_limits := canonify_mem(mem_limits_orig)
                    mem_requests := canonify_mem(mem_requests_orig)
                    mem_ratio := input.parameters.ratio
                    to_number(mem_limits) > to_number(mem_ratio) * to_number(mem_requests)
                    msg := sprintf("container <%v> memory limit <%v> is higher than the maximum allowed ratio of <%v>", [container.name, mem_limits_orig, mem_ratio])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Disallowed container repositories that begin with a string
                  from the specified list.
                metadata.gatekeeper.sh/title: Disallowed Repositories
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sdisallowedrepos
            spec:
              crd:
                spec:
                  names:
                    kind: K8sDisallowedRepos
                  validation:
                    openAPIV3Schema:
                      properties:
                        repos:
                          description: The list of prefixes a container image is not
                            allowed to have.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8sdisallowedrepos

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.containers[_]
                    image := container.image
                    startswith(image, input.parameters.repos[_])
                    msg := sprintf("container <%v> has an invalid image repo <%v>, disallowed repos are %v", [container.name, container.image, input.parameters.repos])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.initContainers[_]
                    image := container.image
                    startswith(image, input.parameters.repos[_])
                    msg := sprintf("initContainer <%v> has an invalid image repo <%v>, disallowed repos are %v", [container.name, container.image, input.parameters.repos])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.ephemeralContainers[_]
                    image := container.image
                    startswith(image, input.parameters.repos[_])
                    msg := sprintf("ephemeralContainer <%v> has an invalid image repo <%v>, disallowed repos are %v", [container.name, container.image, input.parameters.repos])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Disallows associating ClusterRole and Role resources
                  to the system:anonymous user and system:unauthenticated group.
                metadata.gatekeeper.sh/title: Disallow Anonymous Access
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sdisallowanonymous
            spec:
              crd:
                spec:
                  names:
                    kind: K8sDisallowAnonymous
                  validation:
                    openAPIV3Schema:
                      properties:
                        allowedRoles:
                          description: The list of ClusterRoles and Roles that may
                            be associated with the `system:unauthenticated` group
                            and `system:anonymous` user.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8sdisallowanonymous

                  violation[{"msg": msg}] {
                    not is_allowed(input.review.object.roleRef, input.parameters.allowedRoles)
                    review(input.review.object.subjects[_])
                    msg := sprintf("Unauthenticated user reference is not allowed in %v %v ", [input.review.object.kind, input.review.object.metadata.name])
                  }

                  is_allowed(role, allowedRoles) {
                    role.name == allowedRoles[_]
                  }

                  review(subject) = true {
                    subject.name == "system:unauthenticated"
                  }

                  review(subject) = true {
                    subject.name == "system:anonymous"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires container images to have an image tag different from the ones in the specified list.
                  https://kubernetes.io/docs/concepts/containers/images/#image-names
                metadata.gatekeeper.sh/title: Disallow tags
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sdisallowedtags
            spec:
              crd:
                spec:
                  names:
                    kind: K8sDisallowedTags
                  validation:
                    openAPIV3Schema:
                      properties:
                        exemptImages:
                          description: 'Any container that uses an image that matches
                            an entry in this list will be excluded from enforcement.
                            Prefix-matching can be signified with `*`. For example:
                            `my-image-*`. It is recommended that users use the fully-qualified
                            Docker image name (e.g. start with a domain name) in order
                            to avoid unexpectedly exempting images from an untrusted
                            repository.'
                          items:
                            type: string
                          type: array
                        tags:
                          description: Disallowed container image tags.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8sdisallowedtags

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg}] {
                      container := input_containers[_]
                      not is_exempt(container)
                      tags := [forbid | tag = input.parameters.tags[_] ; forbid = endswith(container.image, concat(":", ["", tag]))]
                      any(tags)
                      msg := sprintf("container <%v> uses a disallowed tag <%v>; disallowed tags are %v", [container.name, container.image, input.parameters.tags])
                  }

                  violation[{"msg": msg}] {
                      container := input_containers[_]
                      not is_exempt(container)
                      tag := [contains(container.image, ":")]
                      not all(tag)
                      msg := sprintf("container <%v> didn't specify an image tag <%v>", [container.name, container.image])
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Restricts Service externalIPs to an allowed list of IP addresses.
                  https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
                metadata.gatekeeper.sh/title: External IPs
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8sexternalips
            spec:
              crd:
                spec:
                  names:
                    kind: K8sExternalIPs
                  validation:
                    openAPIV3Schema:
                      properties:
                        allowedIPs:
                          description: An allow-list of external IP addresses.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8sexternalips

                  violation[{"msg": msg}] {
                    input.review.kind.kind == "Service"
                    input.review.kind.group == ""
                    allowedIPs := {ip | ip := input.parameters.allowedIPs[_]}
                    externalIPs := {ip | ip := input.review.object.spec.externalIPs[_]}
                    forbiddenIPs := externalIPs - allowedIPs
                    count(forbiddenIPs) > 0
                    msg := sprintf("service has forbidden external IPs: %v", [forbiddenIPs])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Disallow the following scenarios when deploying `HorizontalPodAutoscalers`
                  1. Deployment of HorizontalPodAutoscalers with `.spec.minReplicas`
                  or `.spec.maxReplicas` outside the ranges defined in the constraint
                  2. Deployment of HorizontalPodAutoscalers where the difference between
                  `.spec.minReplicas` and `.spec.maxReplicas` is less than the configured
                  `minimumReplicaSpread` 3. Deployment of HorizontalPodAutoscalers
                  that do not reference a valid `scaleTargetRef` (e.g. Deployment,
                  ReplicationController, ReplicaSet, StatefulSet).
                metadata.gatekeeper.sh/requiresSyncData: |
                  "[
                    [
                      {
                        "groups":["apps"],
                        "versions": ["v1"],
                        "kinds": ["Deployment"]
                      },
                      {
                        "groups":["apps"],
                        "versions": ["v1"],
                        "kinds": ["StatefulSet"]
                      }
                    ]
                  ]"
                metadata.gatekeeper.sh/title: Horizontal Pod Autoscaler
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8shorizontalpodautoscaler
            spec:
              crd:
                spec:
                  names:
                    kind: K8sHorizontalPodAutoscaler
                  validation:
                    openAPIV3Schema:
                      properties:
                        enforceScaleTargetRef:
                          description: If set to true it validates the HPA scaleTargetRef
                            exists
                          type: boolean
                        minimumReplicaSpread:
                          description: If configured it enforces the minReplicas and
                            maxReplicas in an HPA must have a spread of at least this
                            many replicas
                          type: integer
                        ranges:
                          description: Allowed ranges for numbers of replicas.  Values
                            are inclusive.
                          items:
                            description: A range of allowed replicas.  Values are
                              inclusive.
                            properties:
                              max_replicas:
                                description: The maximum number of replicas allowed,
                                  inclusive.
                                type: integer
                              min_replicas:
                                description: The minimum number of replicas allowed,
                                  inclusive.
                                type: integer
                            type: object
                          type: array
                      type: object
              targets:
              - rego: "package k8shorizontalpodautoscaler\n\nviolation[{\"msg\": msg}]
                  {\n  input.review.kind.kind == \"HorizontalPodAutoscaler\"\n  hpa
                  := input.review.object\n\n  not input_replica_limit(hpa)\n  msg
                  := sprintf(\"The %v <%v> minReplicas %v or maxReplicas %v is not
                  allowed: %v. Allowed ranges: %v\", [hpa.kind, hpa.metadata.name,
                  hpa.spec.minReplicas, hpa.spec.maxReplicas, input.parameters.ranges])\n}\n\nviolation[{\"msg\":
                  msg}] {\n  input.review.kind.kind == \"HorizontalPodAutoscaler\"\n
                  \ hpa := input.review.object\n\n  not input_replica_spread(hpa)\n
                  \ \n  msg := sprintf(\"The %v <%v> is configured with minReplicas
                  %v and maxReplicas %v which is a spread of %v replica(s). The spread
                  must be at least %v replica(s)\", [hpa.kind, hpa.metadata.name,
                  hpa.spec.minReplicas, hpa.spec.maxReplicas, hpa.spec.maxReplicas
                  - hpa.spec.minReplicas, input.parameters.minimumReplicaSpread])\n}\n\nviolation[{\"msg\":
                  msg}] {\n  input.review.kind.kind == \"HorizontalPodAutoscaler\"\n
                  \ hpa := input.review.object\n  input.parameters.enforceScaleTargetRef\n
                  \ \n  not data.inventory.namespace[hpa.metadata.namespace][hpa.spec.scaleTargetRef.apiVersion][hpa.spec.scaleTargetRef.kind][hpa.spec.scaleTargetRef.name]\n
                  \ msg := sprintf(\"The HorizontalPodAutoscaler <%v> has a scaleTargetRef
                  of <%v/%v> but it does not exist. The scaleTargetRef for the HorizontalPodAutoscaler
                  must exist\", [hpa.metadata.name, hpa.spec.scaleTargetRef.kind,
                  hpa.spec.scaleTargetRef.name])\n}\n\ninput_replica_limit(hpa) {\n
                  \   count(input.parameters.ranges) > 0\n    range := input.parameters.ranges[_]\n
                  \   value_within_range(range, hpa.spec.minReplicas, hpa.spec.maxReplicas)\n}\n\nvalue_within_range(range,
                  min_provided, max_provided) {\n    range.min_replicas <= min_provided\n
                  \   range.max_replicas >= max_provided\n}\n\ninput_replica_spread(hpa)
                  {\n    input.parameters.minimumReplicaSpread\n    (hpa.spec.maxReplicas
                  - hpa.spec.minReplicas) >= input.parameters.minimumReplicaSpread\n}\n"
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires Ingress resources to be HTTPS only.  Ingress resources must include the `kubernetes.io/ingress.allow-http` annotation, set to `false`. By default a valid TLS {} configuration is required, this can be made optional by setting the `tlsOptional` parameter to `true`.
                  https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
                metadata.gatekeeper.sh/title: HTTPS Only
                metadata.gatekeeper.sh/version: 1.0.1
              name: k8shttpsonly
            spec:
              crd:
                spec:
                  names:
                    kind: K8sHttpsOnly
                  validation:
                    openAPIV3Schema:
                      description: Requires Ingress resources to be HTTPS only.  Ingress
                        resources must include the `kubernetes.io/ingress.allow-http`
                        annotation, set to `false`. By default a valid TLS {} configuration
                        is required, this can be made optional by setting the `tlsOptional`
                        parameter to `true`.
                      properties:
                        tlsOptional:
                          description: When set to `true` the TLS {} is optional,
                            defaults to false.
                          type: boolean
                      type: object
              targets:
              - rego: |
                  package k8shttpsonly

                  violation[{"msg": msg}] {
                    input.review.object.kind == "Ingress"
                    re_match("^(extensions|networking.k8s.io)/", input.review.object.apiVersion)
                    ingress := input.review.object
                    not https_complete(ingress)
                    not tls_is_optional(ingress)
                    msg := sprintf("Ingress should be https. tls configuration and allow-http=false annotation are required for %v", [ingress.metadata.name])
                  }

                  violation[{"msg": msg}] {
                    input.review.object.kind == "Ingress"
                    re_match("^(extensions|networking.k8s.io)/", input.review.object.apiVersion)
                    ingress := input.review.object
                    not annotation_complete(ingress)
                    not tls_not_optional(ingress)
                    msg := sprintf("Ingress should be https. The allow-http=false annotation is required for %v", [ingress.metadata.name])
                  }

                  https_complete(ingress) = true {
                    ingress.spec["tls"]
                    count(ingress.spec.tls) > 0
                    ingress.metadata.annotations["kubernetes.io/ingress.allow-http"] == "false"
                  }

                  annotation_complete(ingress) = true {
                    ingress.metadata.annotations["kubernetes.io/ingress.allow-http"] == "false"
                  }

                  tls_is_optional(ingress) = true {
                    parameters := object.get(input, "parameters", {})
                    tlsOptional := object.get(parameters, "tlsOptional", false)
                    is_boolean(tlsOptional)
                    true == tlsOptional
                  }

                  tls_not_optional(ingress) = true {
                    parameters := object.get(input, "parameters", {})
                    tlsOptional := object.get(parameters, "tlsOptional", false)
                    true != tlsOptional
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires container images to contain a digest.
                  https://kubernetes.io/docs/concepts/containers/images/
                metadata.gatekeeper.sh/title: Image Digests
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8simagedigests
            spec:
              crd:
                spec:
                  names:
                    kind: K8sImageDigests
                  validation:
                    openAPIV3Schema:
                      description: |-
                        Requires container images to contain a digest.
                        https://kubernetes.io/docs/concepts/containers/images/
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8simagedigests

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.containers[_]
                    not is_exempt(container)
                    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
                    not all(satisfied)
                    msg := sprintf("container <%v> uses an image without a digest <%v>", [container.name, container.image])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.initContainers[_]
                    not is_exempt(container)
                    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
                    not all(satisfied)
                    msg := sprintf("initContainer <%v> uses an image without a digest <%v>", [container.name, container.image])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.ephemeralContainers[_]
                    not is_exempt(container)
                    satisfied := [re_match("@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+", container.image)]
                    not all(satisfied)
                    msg := sprintf("ephemeralContainer <%v> uses an image without a digest <%v>", [container.name, container.image])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Blocks updating the service account on resources that
                  abstract over Pods. This policy is ignored in audit mode.
                metadata.gatekeeper.sh/title: Block updating Service Account
                metadata.gatekeeper.sh/version: 1.0.0
              name: noupdateserviceaccount
            spec:
              crd:
                spec:
                  names:
                    kind: NoUpdateServiceAccount
                  validation:
                    openAPIV3Schema:
                      properties:
                        allowedGroups:
                          description: Groups that should be allowed to bypass the
                            policy.
                          items:
                            type: string
                          type: array
                        allowedUsers:
                          description: Users that should be allowed to bypass the
                            policy.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package noupdateserviceaccount

                  privileged(userInfo, allowedUsers, allowedGroups) {
                    # Allow if the user is in allowedUsers.
                    # Use object.get so omitted parameters can't cause policy bypass by
                    # evaluating to undefined.
                    username := object.get(userInfo, "username", "")
                    allowedUsers[_] == username
                  } {
                    # Allow if the user's groups intersect allowedGroups.
                    # Use object.get so omitted parameters can't cause policy bypass by
                    # evaluating to undefined.
                    userGroups := object.get(userInfo, "groups", [])
                    groups := {g | g := userGroups[_]}
                    allowed := {g | g := allowedGroups[_]}
                    intersection := groups & allowed
                    count(intersection) > 0
                  }

                  get_service_account(obj) = spec {
                    obj.kind == "Pod"
                    spec := obj.spec.serviceAccountName
                  } {
                    obj.kind == "ReplicationController"
                    spec := obj.spec.template.spec.serviceAccountName
                  } {
                    obj.kind == "ReplicaSet"
                    spec := obj.spec.template.spec.serviceAccountName
                  } {
                    obj.kind == "Deployment"
                    spec := obj.spec.template.spec.serviceAccountName
                  } {
                    obj.kind == "StatefulSet"
                    spec := obj.spec.template.spec.serviceAccountName
                  } {
                    obj.kind == "DaemonSet"
                    spec := obj.spec.template.spec.serviceAccountName
                  } {
                    obj.kind == "Job"
                    spec := obj.spec.template.spec.serviceAccountName
                  } {
                    obj.kind == "CronJob"
                    spec := obj.spec.jobTemplate.spec.template.spec.serviceAccountName
                  }

                  violation[{"msg": msg}] {
                    # This policy only applies to updates of existing resources.
                    input.review.operation == "UPDATE"

                    # Use object.get so omitted parameters can't cause policy bypass by
                    # evaluating to undefined.
                    params := object.get(input, "parameters", {})
                    allowedUsers := object.get(params, "allowedUsers", [])
                    allowedGroups := object.get(params, "allowedGroups", [])

                    # Extract the service account.
                    oldKSA := get_service_account(input.review.oldObject)
                    newKSA := get_service_account(input.review.object)

                    # Deny unprivileged users and groups from changing serviceAccountName.
                    not privileged(input.review.userInfo, allowedUsers, allowedGroups)
                    oldKSA != newKSA
                    msg := "user does not have permission to modify serviceAccountName"
                  } {
                    # Defensively require object to have a serviceAccountName.
                    input.review.operation == "UPDATE"
                    not get_service_account(input.review.object)
                    msg := "missing serviceAccountName field in object under review"
                  } {
                    # Defensively require oldObject to have a serviceAccountName.
                    input.review.operation == "UPDATE"
                    not get_service_account(input.review.oldObject)
                    msg := "missing serviceAccountName field in oldObject under review"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Disallow the following scenarios when deploying PodDisruptionBudgets or resources that implement the replica subresource (e.g. Deployment, ReplicationController, ReplicaSet, StatefulSet): 1. Deployment of PodDisruptionBudgets with .spec.maxUnavailable == 0 2. Deployment of PodDisruptionBudgets with .spec.minAvailable == .spec.replicas of the resource with replica subresource This will prevent PodDisruptionBudgets from blocking voluntary disruptions such as node draining.
                  https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
                metadata.gatekeeper.sh/requiresSyncData: |
                  "[
                    [
                      {
                        "groups":["policy"],
                        "versions": ["v1"],
                        "kinds": ["PodDisruptionBudget"]
                      }
                    ]
                  ]"
                metadata.gatekeeper.sh/title: Pod Disruption Budget
                metadata.gatekeeper.sh/version: 1.0.2
              name: k8spoddisruptionbudget
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPodDisruptionBudget
              targets:
              - rego: "package k8spoddisruptionbudget\n\nviolation[{\"msg\": msg}]
                  {\n  input.review.kind.kind == \"PodDisruptionBudget\"\n  pdb :=
                  input.review.object\n\n  not valid_pdb_max_unavailable(pdb)\n  msg
                  := sprintf(\n    \"PodDisruptionBudget <%v> has maxUnavailable of
                  0, only positive integers are allowed for maxUnavailable\",\n    [pdb.metadata.name],\n
                  \ )\n}\n\nviolation[{\"msg\": msg}] {\n  obj := input.review.object\n
                  \ pdb := data.inventory.namespace[obj.metadata.namespace][\"policy/v1\"].PodDisruptionBudget[_]\n\n
                  \ matchLabels := { [label, value] | some label; value := pdb.spec.selector.matchLabels[label]
                  }\n  labels := { [label, value] | some label; value := obj.spec.selector.matchLabels[label]
                  }\n  count(matchLabels - labels) == 0\n\n  not valid_pdb_max_unavailable(pdb)\n
                  \ msg := sprintf(\n    \"%v <%v> has been selected by PodDisruptionBudget
                  <%v> but has maxUnavailable of 0, only positive integers are allowed
                  for maxUnavailable\",\n    [obj.kind, obj.metadata.name, pdb.metadata.name],\n
                  \ )\n}\n\nviolation[{\"msg\": msg}] {\n  obj := input.review.object\n
                  \ pdb := data.inventory.namespace[obj.metadata.namespace][\"policy/v1\"].PodDisruptionBudget[_]\n
                  \ \n  matchLabels := { [label, value] | some label; value := pdb.spec.selector.matchLabels[label]
                  }\n  labels := { [label, value] | some label; value := obj.spec.selector.matchLabels[label]
                  }\n  count(matchLabels - labels) == 0\n\n  not valid_pdb_min_available(obj,
                  pdb)\n  msg := sprintf(\n    \"%v <%v> has %v replica(s) but PodDisruptionBudget
                  <%v> has minAvailable of %v, PodDisruptionBudget count should always
                  be lower than replica(s), and not used when replica(s) is set to
                  1\",\n    [obj.kind, obj.metadata.name, obj.spec.replicas, pdb.metadata.name,
                  pdb.spec.minAvailable],\n  )\n}\n\nvalid_pdb_min_available(obj,
                  pdb) {\n  # default to -1 if minAvailable is not set so valid_pdb_min_available
                  is always true\n  # for objects with >= 0 replicas. If minAvailable
                  defaults to >= 0, objects with\n  # replicas field might violate
                  this constraint if they are equal to the default set here\n  min_available
                  := object.get(pdb.spec, \"minAvailable\", -1)\n  obj.spec.replicas
                  > min_available\n}\n\nvalid_pdb_max_unavailable(pdb) {\n  # default
                  to 1 if maxUnavailable is not set so valid_pdb_max_unavailable always
                  returns true.\n  # If maxUnavailable defaults to 0, it violates
                  this constraint because all pods needs to be\n  # available and
                  no pods can be evicted voluntarily\n  max_unavailable := object.get(pdb.spec,
                  \"maxUnavailable\", 1)\n  max_unavailable > 0\n}\n"
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires that objects with the field `spec.replicas`
                  (Deployments, ReplicaSets, etc.) specify a number of replicas within
                  defined ranges.
                metadata.gatekeeper.sh/title: Replica Limits
                metadata.gatekeeper.sh/version: 1.0.1
              name: k8sreplicalimits
            spec:
              crd:
                spec:
                  names:
                    kind: K8sReplicaLimits
                  validation:
                    openAPIV3Schema:
                      properties:
                        ranges:
                          description: Allowed ranges for numbers of replicas.  Values
                            are inclusive.
                          items:
                            description: A range of allowed replicas.  Values are
                              inclusive.
                            properties:
                              max_replicas:
                                description: The maximum number of replicas allowed,
                                  inclusive.
                                type: integer
                              min_replicas:
                                description: The minimum number of replicas allowed,
                                  inclusive.
                                type: integer
                            type: object
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8sreplicalimits

                  object_name = input.review.object.metadata.name
                  object_kind = input.review.kind.kind

                  violation[{"msg": msg}] {
                      spec := input.review.object.spec
                      not input_replica_limit(spec)
                      msg := sprintf("The provided number of replicas is not allowed for %v: %v. Allowed ranges: %v", [object_kind, object_name, input.parameters])
                  }

                  input_replica_limit(spec) {
                      provided := input.review.object.spec.replicas
                      count(input.parameters.ranges) > 0
                      range := input.parameters.ranges[_]
                      value_within_range(range, provided)
                  }

                  value_within_range(range, value) {
                      range.min_replicas <= value
                      range.max_replicas >= value
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires resources to contain specified annotations,
                  with values matching provided regular expressions.
                metadata.gatekeeper.sh/title: Required Annotations
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8srequiredannotations
            spec:
              crd:
                spec:
                  names:
                    kind: K8sRequiredAnnotations
                  validation:
                    openAPIV3Schema:
                      properties:
                        annotations:
                          description: A list of annotations and values the object
                            must specify.
                          items:
                            properties:
                              allowedRegex:
                                description: If specified, a regular expression the
                                  annotation's value must match. The value must contain
                                  at least one match for the regular expression.
                                type: string
                              key:
                                description: The required annotation.
                                type: string
                            type: object
                          type: array
                        message:
                          type: string
                      type: object
              targets:
              - rego: |
                  package k8srequiredannotations

                  violation[{"msg": msg, "details": {"missing_annotations": missing}}] {
                      provided := {annotation | input.review.object.metadata.annotations[annotation]}
                      required := {annotation | annotation := input.parameters.annotations[_].key}
                      missing := required - provided
                      count(missing) > 0
                      msg := sprintf("you must provide annotation(s): %v", [missing])
                  }

                  violation[{"msg": msg}] {
                    value := input.review.object.metadata.annotations[key]
                    expected := input.parameters.annotations[_]
                    expected.key == key
                    expected.allowedRegex != ""
                    not re_match(expected.allowedRegex, value)
                    msg := sprintf("Annotation <%v: %v> does not satisfy allowed regex: %v", [key, value, expected.allowedRegex])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires resources to contain specified labels, with
                  values matching provided regular expressions.
                metadata.gatekeeper.sh/title: Required Labels
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8srequiredlabels
            spec:
              crd:
                spec:
                  names:
                    kind: K8sRequiredLabels
                  validation:
                    openAPIV3Schema:
                      properties:
                        labels:
                          description: A list of labels and values the object must
                            specify.
                          items:
                            properties:
                              allowedRegex:
                                description: If specified, a regular expression the
                                  annotation's value must match. The value must contain
                                  at least one match for the regular expression.
                                type: string
                              key:
                                description: The required label.
                                type: string
                            type: object
                          type: array
                        message:
                          type: string
                      type: object
              targets:
              - rego: |
                  package k8srequiredlabels

                  get_message(parameters, _default) = msg {
                    not parameters.message
                    msg := _default
                  }

                  get_message(parameters, _default) = msg {
                    msg := parameters.message
                  }

                  violation[{"msg": msg, "details": {"missing_labels": missing}}] {
                    provided := {label | input.review.object.metadata.labels[label]}
                    required := {label | label := input.parameters.labels[_].key}
                    missing := required - provided
                    count(missing) > 0
                    def_msg := sprintf("you must provide labels: %v", [missing])
                    msg := get_message(input.parameters, def_msg)
                  }

                  violation[{"msg": msg}] {
                    value := input.review.object.metadata.labels[key]
                    expected := input.parameters.labels[_]
                    expected.key == key
                    # do not match if allowedRegex is not defined, or is an empty string
                    expected.allowedRegex != ""
                    not re_match(expected.allowedRegex, value)
                    def_msg := sprintf("Label <%v: %v> does not satisfy allowed regex: %v", [key, value, expected.allowedRegex])
                    msg := get_message(input.parameters, def_msg)
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires Pods to have readiness and/or liveness probes.
                metadata.gatekeeper.sh/title: Required Probes
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8srequiredprobes
            spec:
              crd:
                spec:
                  names:
                    kind: K8sRequiredProbes
                  validation:
                    openAPIV3Schema:
                      properties:
                        probeTypes:
                          description: The probe must define a field listed in `probeType`
                            in order to satisfy the constraint (ex. `tcpSocket` satisfies
                            `['tcpSocket', 'exec']`)
                          items:
                            type: string
                          type: array
                        probes:
                          description: 'A list of probes that are required (ex: `readinessProbe`)'
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8srequiredprobes

                  probe_type_set = probe_types {
                      probe_types := {type | type := input.parameters.probeTypes[_]}
                  }

                  violation[{"msg": msg}] {
                      container := input.review.object.spec.containers[_]
                      probe := input.parameters.probes[_]
                      probe_is_missing(container, probe)
                      msg := get_violation_message(container, input.review, probe)
                  }

                  probe_is_missing(ctr, probe) = true {
                      not ctr[probe]
                  }

                  probe_is_missing(ctr, probe) = true {
                      probe_field_empty(ctr, probe)
                  }

                  probe_field_empty(ctr, probe) = true {
                      probe_fields := {field | ctr[probe][field]}
                      diff_fields := probe_type_set - probe_fields
                      count(diff_fields) == count(probe_type_set)
                  }

                  get_violation_message(container, review, probe) = msg {
                      msg := sprintf("Container <%v> in your <%v> <%v> has no <%v>", [container.name, review.kind.kind, review.object.metadata.name, probe])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires all Ingress rule hosts to be unique.
                  Does not handle hostname wildcards: https://kubernetes.io/docs/concepts/services-networking/ingress/
                metadata.gatekeeper.sh/requiresSyncData: |
                  "[
                    [
                      {
                        "groups": ["extensions"],
                        "versions": ["v1beta1"],
                        "kinds": ["Ingress"]
                      },
                      {
                        "groups": ["networking.k8s.io"],
                        "versions": ["v1beta1", "v1"],
                        "kinds": ["Ingress"]
                      }
                    ]
                  ]"
                metadata.gatekeeper.sh/title: Unique Ingress Host
                metadata.gatekeeper.sh/version: 1.0.2
              name: k8suniqueingresshost
            spec:
              crd:
                spec:
                  names:
                    kind: K8sUniqueIngressHost
              targets:
              - rego: |
                  package k8suniqueingresshost

                  identical(obj, review) {
                    obj.metadata.namespace == review.object.metadata.namespace
                    obj.metadata.name == review.object.metadata.name
                  }

                  violation[{"msg": msg}] {
                    input.review.kind.kind == "Ingress"
                    re_match("^(extensions|networking.k8s.io)$", input.review.kind.group)
                    host := input.review.object.spec.rules[_].host
                    other := data.inventory.namespace[_][otherapiversion]["Ingress"][name]
                    re_match("^(extensions|networking.k8s.io)/.+$", otherapiversion)
                    other.spec.rules[_].host == host
                    not identical(other, input.review)
                    msg := sprintf("ingress host conflicts with an existing ingress <%v>", [host])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires Services to have unique selectors within a namespace. Selectors are considered the same if they have identical keys and values. Selectors may share a key/value pair so long as there is at least one distinct key/value pair between them.
                  https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                metadata.gatekeeper.sh/requiresSyncData: |
                  "[
                    [
                      {
                        "groups":[""],
                        "versions": ["v1"],
                        "kinds": ["Service"]
                      }
                    ]
                  ]"
                metadata.gatekeeper.sh/title: Unique Service Selector
                metadata.gatekeeper.sh/version: 1.0.1
              name: k8suniqueserviceselector
            spec:
              crd:
                spec:
                  names:
                    kind: K8sUniqueServiceSelector
              targets:
              - rego: |
                  package k8suniqueserviceselector

                  make_apiversion(kind) = apiVersion {
                    g := kind.group
                    v := kind.version
                    g != ""
                    apiVersion = sprintf("%v/%v", [g, v])
                  }

                  make_apiversion(kind) = apiVersion {
                    kind.group == ""
                    apiVersion = kind.version
                  }

                  identical(obj, review) {
                    obj.metadata.namespace == review.namespace
                    obj.metadata.name == review.name
                    obj.kind == review.kind.kind
                    obj.apiVersion == make_apiversion(review.kind)
                  }

                  flatten_selector(obj) = flattened {
                    selectors := [s | s = concat(":", [key, val]); val = obj.spec.selector[key]]
                    flattened := concat(",", sort(selectors))
                  }

                  violation[{"msg": msg}] {
                    input.review.kind.kind == "Service"
                    input.review.kind.version == "v1"
                    input.review.kind.group == ""
                    input_selector := flatten_selector(input.review.object)
                    other := data.inventory.namespace[namespace][_]["Service"][name]
                    not identical(other, input.review)
                    other_selector := flatten_selector(other)
                    input_selector == other_selector
                    msg := sprintf("same selector as service <%v> in namespace <%v>", [name, namespace])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Verifies deprecated Kubernetes APIs to ensure all the
                  API versions are up to date. This template does not apply to audit
                  as audit looks at the resources which are already present in the
                  cluster with non-deprecated API versions.
                metadata.gatekeeper.sh/title: Verify deprecated APIs
                metadata.gatekeeper.sh/version: 1.0.0
              name: verifydeprecatedapi
            spec:
              crd:
                spec:
                  names:
                    kind: VerifyDeprecatedAPI
                  validation:
                    openAPIV3Schema:
                      properties:
                        k8sVersion:
                          description: kubernetes version
                          type: number
                        kvs:
                          description: Deprecated api versions and corresponding kinds
                          items:
                            properties:
                              deprecatedAPI:
                                description: deprecated api
                                example: flowcontrol.apiserver.k8s.io/v1beta2
                                type: string
                              kinds:
                                description: impacted list of kinds
                                example: '["FlowSchema", "PriorityLevelConfiguration"]'
                                items:
                                  type: string
                                type: array
                              targetAPI:
                                description: target api
                                example: flowcontrol.apiserver.k8s.io/v1beta3
                                type: string
                            type: object
                          type: array
                      type: object
              targets:
              - rego: |
                  package verifydeprecatedapi

                  violation[{"msg": msg}] {
                    kvs := input.parameters.kvs[_]
                    kvs.deprecatedAPI == input.review.object.apiVersion
                    k := kvs.kinds[_]
                    k == input.review.object.kind
                    msg := get_message(input.review.object.kind, input.review.object.apiVersion, input.parameters.k8sVersion, kvs.targetAPI)
                  }

                  get_message(kind, apiVersion, k8sVersion, targetAPI) = msg {
                    not match(targetAPI)
                    msg := sprintf("API %v for %v is deprecated in Kubernetes version %v, please use %v instead", [kind, apiVersion, k8sVersion, targetAPI])
                  }

                  get_message(kind, apiVersion, k8sVersion, targetAPI) = msg {
                    match(targetAPI)
                    msg := sprintf("API %v for %v is deprecated in Kubernetes version %v, please see Kubernetes API deprecation guide", [kind, apiVersion, k8sVersion])
                  }

                  match(api) {
                    api == "None"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires containers to have defined resources set.
                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                metadata.gatekeeper.sh/title: Required Resources
                metadata.gatekeeper.sh/version: 1.0.1
              name: k8srequiredresources
            spec:
              crd:
                spec:
                  names:
                    kind: K8sRequiredResources
                  validation:
                    openAPIV3Schema:
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        limits:
                          description: A list of limits that should be enforced (`cpu`,
                            `memory`, or both).
                          items:
                            enum:
                            - cpu
                            - memory
                            type: string
                          type: array
                        requests:
                          description: A list of requests that should be enforced
                            (`cpu`, `memory`, or both).
                          items:
                            enum:
                            - cpu
                            - memory
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8srequiredresources

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "containers"}]
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "initContainers"}]
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    provided := {resource_type | container.resources.limits[resource_type]}
                    required := {resource_type | resource_type := input.parameters.limits[_]}
                    missing := required - provided
                    count(missing) > 0
                    msg := sprintf("container <%v> does not have <%v> limits defined", [container.name, missing])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    provided := {resource_type | container.resources.requests[resource_type]}
                    required := {resource_type | resource_type := input.parameters.requests[_]}
                    missing := required - provided
                    count(missing) > 0
                    msg := sprintf("container <%v> does not have <%v> requests defined", [container.name, missing])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires storage classes to be specified when used. Only
                  Gatekeeper 3.9+ is supported.
                metadata.gatekeeper.sh/requiresSyncData: |
                  "[
                    [
                      {
                        "groups":["storage.k8s.io"],
                        "versions": ["v1"],
                        "kinds": ["StorageClass"]
                      }
                    ]
                  ]"
                metadata.gatekeeper.sh/title: Storage Class
                metadata.gatekeeper.sh/version: 1.1.0
              name: k8sstorageclass
            spec:
              crd:
                spec:
                  names:
                    kind: K8sStorageClass
                  validation:
                    openAPIV3Schema:
                      description: Requires storage classes to be specified when used.
                      properties:
                        allowedStorageClasses:
                          description: An optional allow-list of storage classes.  If
                            specified, any storage class not in the `allowedStorageClasses`
                            parameter is disallowed.
                          items:
                            type: string
                          type: array
                        includeStorageClassesInMessage:
                          default: true
                          type: boolean
                      type: object
              targets:
              - rego: |
                  package k8sstorageclass

                  is_pvc(obj) {
                    obj.apiVersion == "v1"
                    obj.kind == "PersistentVolumeClaim"
                  }

                  is_statefulset(obj) {
                    obj.apiVersion == "apps/v1"
                    obj.kind == "StatefulSet"
                  }

                  violation[{"msg": msg}] {
                    not data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"]
                    msg := sprintf("StorageClasses not synced. Gatekeeper may be misconfigured. Please have a cluster-admin consult the documentation.", [])
                  }

                  storageclass_allowed(name) {
                    data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][name]
                    # support both direct use of * and as the default value
                    object.get(input.parameters, "allowedStorageClasses", ["*"])[_] == "*"
                  }

                  storageclass_allowed(name) {
                    data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][name]
                    input.parameters.allowedStorageClasses[_] == name
                  }

                  violation[{"msg": pvc_storageclass_badname_msg}] {
                    is_pvc(input.review.object)
                    not storageclass_allowed(input.review.object.spec.storageClassName)
                  }
                  pvc_storageclass_badname_msg := sprintf("pvc did not specify a valid storage class name <%v>. Must be one of [%v]", args) {
                    input.parameters.includeStorageClassesInMessage
                    object.get(input.parameters, "allowedStorageClasses", null) == null
                    args := [
                      input.review.object.spec.storageClassName,
                      concat(", ", [n | data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][n]])
                    ]
                  } else := sprintf("pvc did not specify an allowed and valid storage class name <%v>. Must be one of [%v]", args) {
                    input.parameters.includeStorageClassesInMessage
                    object.get(input.parameters, "allowedStorageClasses", null) != null
                    sc := {n | data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][n]} & {x | x = object.get(input.parameters, "allowedStorageClasses", [])[_]}
                    args := [
                      input.review.object.spec.storageClassName,
                      concat(", ", sc)
                    ]
                  } else := sprintf(
                    "pvc did not specify a valid storage class name <%v>.",
                    [input.review.object.spec.storageClassName]
                  )

                  violation[{"msg": pvc_storageclass_noname_msg}] {
                    is_pvc(input.review.object)
                    not input.review.object.spec.storageClassName
                  }
                  pvc_storageclass_noname_msg := sprintf("pvc did not specify a storage class name. Must be one of [%v]", args) {
                    input.parameters.includeStorageClassesInMessage
                    args := [
                      concat(", ", [n | data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][n]])
                    ]
                  } else := sprintf(
                    "pvc did not specify a storage class name.",
                    []
                  )

                  violation[{"msg": statefulset_vct_badname_msg(vct)}] {
                    is_statefulset(input.review.object)
                    vct := input.review.object.spec.volumeClaimTemplates[_]
                    not storageclass_allowed(vct.spec.storageClassName)
                  }
                  statefulset_vct_badname_msg(vct) := msg {
                    input.parameters.includeStorageClassesInMessage
                    object.get(input.parameters, "allowedStorageClasses", null) == null
                    msg := sprintf(
                        "statefulset did not specify a valid storage class name <%v>. Must be one of [%v]", [
                        vct.spec.storageClassName,
                        concat(", ", [n | data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][n]])
                    ])
                  }
                  statefulset_vct_badname_msg(vct) := msg {
                    input.parameters.includeStorageClassesInMessage
                    object.get(input.parameters, "allowedStorageClasses", null) != null
                    sc := {n | data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][n]} & {x | x = object.get(input.parameters, "allowedStorageClasses", [])[_]}
                    msg := sprintf(
                        "statefulset did not specify an allowed and valid storage class name <%v>. Must be one of [%v]", [
                        vct.spec.storageClassName,
                        concat(", ", sc)
                    ])
                  }
                  statefulset_vct_badname_msg(vct) := msg {
                    not input.parameters.includeStorageClassesInMessage
                    msg := sprintf(
                      "statefulset did not specify a valid storage class name <%v>.", [
                        vct.spec.storageClassName
                    ])
                  }

                  violation[{"msg": statefulset_vct_noname_msg}] {
                    is_statefulset(input.review.object)
                    vct := input.review.object.spec.volumeClaimTemplates[_]
                    not vct.spec.storageClassName
                  }
                  statefulset_vct_noname_msg := sprintf("statefulset did not specify a storage class name. Must be one of [%v]", args) {
                    input.parameters.includeStorageClassesInMessage
                    args := [
                      concat(", ", [n | data.inventory.cluster["storage.k8s.io/v1"]["StorageClass"][n]])
                    ]
                  } else := sprintf(
                    "statefulset did not specify a storage class name.",
                    []
                  )

                  #FIXME pod generic ephemeral might be good to validate some day too.
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: |-
                  Requires containers to have an ephemeral storage limit set and constrains the limit to be within the specified maximum values.
                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                metadata.gatekeeper.sh/title: Container ephemeral storage limit
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8scontainerephemeralstoragelimit
            spec:
              crd:
                spec:
                  names:
                    kind: K8sContainerEphemeralStorageLimit
                  validation:
                    openAPIV3Schema:
                      properties:
                        ephemeral-storage:
                          description: The maximum allowed ephemeral storage limit
                            on a Pod, exclusive.
                          type: string
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8scontainerephemeralstoragelimit

                  import data.lib.exempt_container.is_exempt

                  missing(obj, field) = true {
                    not obj[field]
                  }

                  missing(obj, field) = true {
                    obj[field] == ""
                  }

                  has_field(object, field) = true {
                      object[field]
                  }

                  # 10 ** 21
                  storage_multiple("E") = 1000000000000000000000 { true }

                  # 10 ** 18
                  storage_multiple("P") = 1000000000000000000 { true }

                  # 10 ** 15
                  storage_multiple("T") = 1000000000000000 { true }

                  # 10 ** 12
                  storage_multiple("G") = 1000000000000 { true }

                  # 10 ** 9
                  storage_multiple("M") = 1000000000 { true }

                  # 10 ** 6
                  storage_multiple("k") = 1000000 { true }

                  # 10 ** 3
                  storage_multiple("") = 1000 { true }

                  # Kubernetes accepts millibyte precision when it probably shouldn't.
                  # https://github.com/kubernetes/kubernetes/issues/28741
                  # 10 ** 0
                  storage_multiple("m") = 1 { true }

                  # 1000 * 2 ** 10
                  storage_multiple("Ki") = 1024000 { true }

                  # 1000 * 2 ** 20
                  storage_multiple("Mi") = 1048576000 { true }

                  # 1000 * 2 ** 30
                  storage_multiple("Gi") = 1073741824000 { true }

                  # 1000 * 2 ** 40
                  storage_multiple("Ti") = 1099511627776000 { true }

                  # 1000 * 2 ** 50
                  storage_multiple("Pi") = 1125899906842624000 { true }

                  # 1000 * 2 ** 60
                  storage_multiple("Ei") = 1152921504606846976000 { true }

                  get_suffix(storage) = suffix {
                    not is_string(storage)
                    suffix := ""
                  }

                  get_suffix(storage) = suffix {
                    is_string(storage)
                    count(storage) > 0
                    suffix := substring(storage, count(storage) - 1, -1)
                    storage_multiple(suffix)
                  }

                  get_suffix(storage) = suffix {
                    is_string(storage)
                    count(storage) > 1
                    suffix := substring(storage, count(storage) - 2, -1)
                    storage_multiple(suffix)
                  }

                  get_suffix(storage) = suffix {
                    is_string(storage)
                    count(storage) > 1
                    not storage_multiple(substring(storage, count(storage) - 1, -1))
                    not storage_multiple(substring(storage, count(storage) - 2, -1))
                    suffix := ""
                  }

                  get_suffix(storage) = suffix {
                    is_string(storage)
                    count(storage) == 1
                    not storage_multiple(substring(storage, count(storage) - 1, -1))
                    suffix := ""
                  }

                  get_suffix(storage) = suffix {
                    is_string(storage)
                    count(storage) == 0
                    suffix := ""
                  }

                  canonify_storage(orig) = new {
                    is_number(orig)
                    new := orig * 1000
                  }

                  canonify_storage(orig) = new {
                    not is_number(orig)
                    suffix := get_suffix(orig)
                    raw := replace(orig, suffix, "")
                    re_match("^[0-9]+(\\.[0-9]+)?$", raw)
                    new := to_number(raw) * storage_multiple(suffix)
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "containers"}]
                  }

                  violation[{"msg": msg}] {
                    general_violation[{"msg": msg, "field": "initContainers"}]
                  }

                  # Ephemeral containers not checked as it is not possible to set field.

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    storage_orig := container.resources.limits["ephemeral-storage"]
                    not canonify_storage(storage_orig)
                    msg := sprintf("container <%v> ephemeral-storage limit <%v> could not be parsed", [container.name, storage_orig])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources
                    msg := sprintf("container <%v> has no resource limits", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    not container.resources.limits
                    msg := sprintf("container <%v> has no resource limits", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    missing(container.resources.limits, "ephemeral-storage")
                    msg := sprintf("container <%v> has no ephemeral-storage limit", [container.name])
                  }

                  general_violation[{"msg": msg, "field": field}] {
                    container := input.review.object.spec[field][_]
                    not is_exempt(container)
                    storage_orig := container.resources.limits["ephemeral-storage"]
                    storage := canonify_storage(storage_orig)
                    max_storage_orig := input.parameters["ephemeral-storage"]
                    max_storage := canonify_storage(max_storage_orig)
                    storage > max_storage
                    msg := sprintf("container <%v> ephemeral-storage limit <%v> is higher than the maximum allowed of <%v>", [container.name, storage_orig, max_storage_orig])
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls restricting escalation to root privileges. Corresponds
                  to the `allowPrivilegeEscalation` field in a PodSecurityPolicy.
                  For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation
                metadata.gatekeeper.sh/title: Allow Privilege Escalation in Container
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspallowprivilegeescalationcontainer
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPAllowPrivilegeEscalationContainer
                  validation:
                    openAPIV3Schema:
                      description: Controls restricting escalation to root privileges.
                        Corresponds to the `allowPrivilegeEscalation` field in a PodSecurityPolicy.
                        For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspallowprivilegeescalationcontainer

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg, "details": {}}] {
                      c := input_containers[_]
                      not is_exempt(c)
                      input_allow_privilege_escalation(c)
                      msg := sprintf("Privilege escalation container is not allowed: %v", [c.name])
                  }

                  input_allow_privilege_escalation(c) {
                      not has_field(c, "securityContext")
                  }
                  input_allow_privilege_escalation(c) {
                      not c.securityContext.allowPrivilegeEscalation == false
                  }
                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }
                  # has_field returns whether an object has a field
                  has_field(object, field) = true {
                      object[field]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Configures an allow-list of AppArmor profiles for use
                  by containers. This corresponds to specific annotations applied
                  to a PodSecurityPolicy. For information on AppArmor, see https://kubernetes.io/docs/tutorials/clusters/apparmor/
                metadata.gatekeeper.sh/title: App Armor
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspapparmor
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPAppArmor
                  validation:
                    openAPIV3Schema:
                      description: Configures an allow-list of AppArmor profiles for
                        use by containers. This corresponds to specific annotations
                        applied to a PodSecurityPolicy. For information on AppArmor,
                        see https://kubernetes.io/docs/tutorials/clusters/apparmor/
                      properties:
                        allowedProfiles:
                          description: 'An array of AppArmor profiles. Examples: `runtime/default`,
                            `unconfined`.'
                          items:
                            type: string
                          type: array
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspapparmor

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg, "details": {}}] {
                      metadata := input.review.object.metadata
                      container := input_containers[_]
                      not is_exempt(container)
                      not input_apparmor_allowed(container, metadata)
                      msg := sprintf("AppArmor profile is not allowed, pod: %v, container: %v. Allowed profiles: %v", [input.review.object.metadata.name, container.name, input.parameters.allowedProfiles])
                  }

                  input_apparmor_allowed(container, metadata) {
                      get_annotation_for(container, metadata) == input.parameters.allowedProfiles[_]
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }

                  get_annotation_for(container, metadata) = out {
                      out = metadata.annotations[sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])]
                  }
                  get_annotation_for(container, metadata) = out {
                      not metadata.annotations[sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])]
                      out = "runtime/default"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls Linux capabilities on containers. Corresponds
                  to the `allowedCapabilities` and `requiredDropCapabilities` fields
                  in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities
                metadata.gatekeeper.sh/title: Capabilities
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspcapabilities
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPCapabilities
                  validation:
                    openAPIV3Schema:
                      description: Controls Linux capabilities on containers. Corresponds
                        to the `allowedCapabilities` and `requiredDropCapabilities`
                        fields in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#capabilities
                      properties:
                        allowedCapabilities:
                          description: A list of Linux capabilities that can be added
                            to a container.
                          items:
                            type: string
                          type: array
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        requiredDropCapabilities:
                          description: A list of Linux capabilities that are required
                            to be dropped from a container.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package capabilities

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.containers[_]
                    not is_exempt(container)
                    has_disallowed_capabilities(container)
                    msg := sprintf("container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.containers[_]
                    not is_exempt(container)
                    missing_drop_capabilities(container)
                    msg := sprintf("container <%v> is not dropping all required capabilities. Container must drop all of %v or \"ALL\"", [container.name, input.parameters.requiredDropCapabilities])
                  }



                  violation[{"msg": msg}] {
                    container := input.review.object.spec.initContainers[_]
                    not is_exempt(container)
                    has_disallowed_capabilities(container)
                    msg := sprintf("init container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.initContainers[_]
                    not is_exempt(container)
                    missing_drop_capabilities(container)
                    msg := sprintf("init container <%v> is not dropping all required capabilities. Container must drop all of %v or \"ALL\"", [container.name, input.parameters.requiredDropCapabilities])
                  }



                  violation[{"msg": msg}] {
                    container := input.review.object.spec.ephemeralContainers[_]
                    not is_exempt(container)
                    has_disallowed_capabilities(container)
                    msg := sprintf("ephemeral container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
                  }

                  violation[{"msg": msg}] {
                    container := input.review.object.spec.ephemeralContainers[_]
                    not is_exempt(container)
                    missing_drop_capabilities(container)
                    msg := sprintf("ephemeral container <%v> is not dropping all required capabilities. Container must drop all of %v or \"ALL\"", [container.name, input.parameters.requiredDropCapabilities])
                  }


                  has_disallowed_capabilities(container) {
                    allowed := {c | c := lower(input.parameters.allowedCapabilities[_])}
                    not allowed["*"]
                    capabilities := {c | c := lower(container.securityContext.capabilities.add[_])}

                    count(capabilities - allowed) > 0
                  }

                  missing_drop_capabilities(container) {
                    must_drop := {c | c := lower(input.parameters.requiredDropCapabilities[_])}
                    all := {"all"}
                    dropped := {c | c := lower(container.securityContext.capabilities.drop[_])}

                    count(must_drop - dropped) > 0
                    count(all - dropped) > 0
                  }

                  get_default(obj, param, _default) = out {
                    out = obj[param]
                  }

                  get_default(obj, param, _default) = out {
                    not obj[param]
                    not obj[param] == false
                    out = _default
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the allowlist of FlexVolume drivers. Corresponds
                  to the `allowedFlexVolumes` field in PodSecurityPolicy. For more
                  information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers
                metadata.gatekeeper.sh/title: FlexVolumes
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspflexvolumes
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPFlexVolumes
                  validation:
                    openAPIV3Schema:
                      description: Controls the allowlist of FlexVolume drivers. Corresponds
                        to the `allowedFlexVolumes` field in PodSecurityPolicy. For
                        more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#flexvolume-drivers
                      properties:
                        allowedFlexVolumes:
                          description: An array of AllowedFlexVolume objects.
                          items:
                            properties:
                              driver:
                                description: The name of the FlexVolume driver.
                                type: string
                            type: object
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8spspflexvolumes

                  violation[{"msg": msg, "details": {}}] {
                      volume := input_flexvolumes[_]
                      not input_flexvolumes_allowed(volume)
                      msg := sprintf("FlexVolume %v is not allowed, pod: %v. Allowed drivers: %v", [volume, input.review.object.metadata.name, input.parameters.allowedFlexVolumes])
                  }

                  input_flexvolumes_allowed(volume) {
                      input.parameters.allowedFlexVolumes[_].driver == volume.flexVolume.driver
                  }

                  input_flexvolumes[v] {
                      v := input.review.object.spec.volumes[_]
                      has_field(v, "flexVolume")
                  }

                  # has_field returns whether an object has a field
                  has_field(object, field) = true {
                      object[field]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the `sysctl` profile used by containers. Corresponds
                  to the `allowedUnsafeSysctls` and `forbiddenSysctls` fields in a
                  PodSecurityPolicy. When specified, any sysctl not in the `allowedSysctls`
                  parameter is considered to be forbidden. The `forbiddenSysctls`
                  parameter takes precedence over the `allowedSysctls` parameter.
                  For more information, see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/
                metadata.gatekeeper.sh/title: Forbidden Sysctls
                metadata.gatekeeper.sh/version: 1.1.1
              name: k8spspforbiddensysctls
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPForbiddenSysctls
                  validation:
                    openAPIV3Schema:
                      description: Controls the `sysctl` profile used by containers.
                        Corresponds to the `allowedUnsafeSysctls` and `forbiddenSysctls`
                        fields in a PodSecurityPolicy. When specified, any sysctl
                        not in the `allowedSysctls` parameter is considered to be
                        forbidden. The `forbiddenSysctls` parameter takes precedence
                        over the `allowedSysctls` parameter. For more information,
                        see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/
                      properties:
                        allowedSysctls:
                          description: An allow-list of sysctls. `*` allows all sysctls
                            not listed in the `forbiddenSysctls` parameter.
                          items:
                            type: string
                          type: array
                        forbiddenSysctls:
                          description: A disallow-list of sysctls. `*` forbids all
                            sysctls.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8spspforbiddensysctls

                  # Block if forbidden
                  violation[{"msg": msg, "details": {}}] {
                      sysctl := input.review.object.spec.securityContext.sysctls[_].name
                      forbidden_sysctl(sysctl)
                      msg := sprintf("The sysctl %v is not allowed, pod: %v. Forbidden sysctls: %v", [sysctl, input.review.object.metadata.name, input.parameters.forbiddenSysctls])
                  }

                  # Block if not explicitly allowed
                  violation[{"msg": msg, "details": {}}] {
                      sysctl := input.review.object.spec.securityContext.sysctls[_].name
                      not allowed_sysctl(sysctl)
                      msg := sprintf("The sysctl %v is not explicitly allowed, pod: %v. Allowed sysctls: %v", [sysctl, input.review.object.metadata.name, input.parameters.allowedSysctls])
                  }

                  # * may be used to forbid all sysctls
                  forbidden_sysctl(sysctl) {
                      input.parameters.forbiddenSysctls[_] == "*"
                  }

                  forbidden_sysctl(sysctl) {
                      input.parameters.forbiddenSysctls[_] == sysctl
                  }

                  forbidden_sysctl(sysctl) {
                      forbidden := input.parameters.forbiddenSysctls[_]
                      endswith(forbidden, "*")
                      startswith(sysctl, trim_suffix(forbidden, "*"))
                  }

                  # * may be used to allow all sysctls
                  allowed_sysctl(sysctl) {
                      input.parameters.allowedSysctls[_] == "*"
                  }

                  allowed_sysctl(sysctl) {
                      input.parameters.allowedSysctls[_] == sysctl
                  }

                  allowed_sysctl(sysctl) {
                      allowed := input.parameters.allowedSysctls[_]
                      endswith(allowed, "*")
                      startswith(sysctl, trim_suffix(allowed, "*"))
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls allocating an FSGroup that owns the Pod's volumes.
                  Corresponds to the `fsGroup` field in a PodSecurityPolicy. For more
                  information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                metadata.gatekeeper.sh/title: FS Group
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspfsgroup
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPFSGroup
                  validation:
                    openAPIV3Schema:
                      description: Controls allocating an FSGroup that owns the Pod's
                        volumes. Corresponds to the `fsGroup` field in a PodSecurityPolicy.
                        For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                      properties:
                        ranges:
                          description: GID ranges affected by the rule.
                          items:
                            properties:
                              max:
                                description: The maximum GID in the range, inclusive.
                                type: integer
                              min:
                                description: The minimum GID in the range, inclusive.
                                type: integer
                            type: object
                          type: array
                        rule:
                          description: An FSGroup rule name.
                          enum:
                          - MayRunAs
                          - MustRunAs
                          - RunAsAny
                          type: string
                      type: object
              targets:
              - rego: |
                  package k8spspfsgroup

                  violation[{"msg": msg, "details": {}}] {
                      spec := input.review.object.spec
                      not input_fsGroup_allowed(spec)
                      msg := sprintf("The provided pod spec fsGroup is not allowed, pod: %v. Allowed fsGroup: %v", [input.review.object.metadata.name, input.parameters])
                  }

                  input_fsGroup_allowed(spec) {
                      # RunAsAny - No range is required. Allows any fsGroup ID to be specified.
                      input.parameters.rule == "RunAsAny"
                  }
                  input_fsGroup_allowed(spec) {
                      # MustRunAs - Validates pod spec fsgroup against all ranges
                      input.parameters.rule == "MustRunAs"
                      fg := spec.securityContext.fsGroup
                      count(input.parameters.ranges) > 0
                      range := input.parameters.ranges[_]
                      value_within_range(range, fg)
                  }
                  input_fsGroup_allowed(spec) {
                      # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
                      input.parameters.rule == "MayRunAs"
                      not has_field(spec, "securityContext")
                  }
                  input_fsGroup_allowed(spec) {
                      # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
                      input.parameters.rule == "MayRunAs"
                      not spec.securityContext.fsGroup
                  }
                  input_fsGroup_allowed(spec) {
                      # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
                      input.parameters.rule == "MayRunAs"
                      fg := spec.securityContext.fsGroup
                      count(input.parameters.ranges) > 0
                      range := input.parameters.ranges[_]
                      value_within_range(range, fg)
                  }
                  value_within_range(range, value) {
                      range.min <= value
                      range.max >= value
                  }
                  # has_field returns whether an object has a field
                  has_field(object, field) = true {
                      object[field]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls usage of the host filesystem. Corresponds to
                  the `allowedHostPaths` field in a PodSecurityPolicy. For more information,
                  see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                metadata.gatekeeper.sh/title: Host Filesystem
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spsphostfilesystem
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPHostFilesystem
                  validation:
                    openAPIV3Schema:
                      description: Controls usage of the host filesystem. Corresponds
                        to the `allowedHostPaths` field in a PodSecurityPolicy. For
                        more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                      properties:
                        allowedHostPaths:
                          description: An array of hostpath objects, representing
                            paths and read/write configuration.
                          items:
                            properties:
                              pathPrefix:
                                description: The path prefix that the host volume
                                  must match.
                                type: string
                              readOnly:
                                description: 'when set to true, any container volumeMounts
                                  matching the pathPrefix must include `readOnly:
                                  true`.'
                                type: boolean
                            type: object
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8spsphostfilesystem

                  violation[{"msg": msg, "details": {}}] {
                      volume := input_hostpath_volumes[_]
                      allowedPaths := get_allowed_paths(input)
                      input_hostpath_violation(allowedPaths, volume)
                      msg := sprintf("HostPath volume %v is not allowed, pod: %v. Allowed path: %v", [volume, input.review.object.metadata.name, allowedPaths])
                  }

                  input_hostpath_violation(allowedPaths, volume) {
                      # An empty list means all host paths are blocked
                      allowedPaths == []
                  }
                  input_hostpath_violation(allowedPaths, volume) {
                      not input_hostpath_allowed(allowedPaths, volume)
                  }

                  get_allowed_paths(arg) = out {
                      not arg.parameters
                      out = []
                  }
                  get_allowed_paths(arg) = out {
                      not arg.parameters.allowedHostPaths
                      out = []
                  }
                  get_allowed_paths(arg) = out {
                      out = arg.parameters.allowedHostPaths
                  }

                  input_hostpath_allowed(allowedPaths, volume) {
                      allowedHostPath := allowedPaths[_]
                      path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
                      not allowedHostPath.readOnly == true
                  }

                  input_hostpath_allowed(allowedPaths, volume) {
                      allowedHostPath := allowedPaths[_]
                      path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
                      allowedHostPath.readOnly
                      not writeable_input_volume_mounts(volume.name)
                  }

                  writeable_input_volume_mounts(volume_name) {
                      container := input_containers[_]
                      mount := container.volumeMounts[_]
                      mount.name == volume_name
                      not mount.readOnly
                  }

                  # This allows "/foo", "/foo/", "/foo/bar" etc., but
                  # disallows "/fool", "/etc/foo" etc.
                  path_matches(prefix, path) {
                      a := path_array(prefix)
                      b := path_array(path)
                      prefix_matches(a, b)
                  }
                  path_array(p) = out {
                      p != "/"
                      out := split(trim(p, "/"), "/")
                  }
                  # This handles the special case for "/", since
                  # split(trim("/", "/"), "/") == [""]
                  path_array("/") = []

                  prefix_matches(a, b) {
                      count(a) <= count(b)
                      not any_not_equal_upto(a, b, count(a))
                  }

                  any_not_equal_upto(a, b, n) {
                      a[i] != b[i]
                      i < n
                  }

                  input_hostpath_volumes[v] {
                      v := input.review.object.spec.volumes[_]
                      has_field(v, "hostPath")
                  }

                  # has_field returns whether an object has a field
                  has_field(object, field) = true {
                      object[field]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }

                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }

                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Disallows sharing of host PID and IPC namespaces by pod
                  containers. Corresponds to the `hostPID` and `hostIPC` fields in
                  a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
                metadata.gatekeeper.sh/title: Host Namespace
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spsphostnamespace
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPHostNamespace
                  validation:
                    openAPIV3Schema:
                      description: Disallows sharing of host PID and IPC namespaces
                        by pod containers. Corresponds to the `hostPID` and `hostIPC`
                        fields in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
                      type: object
              targets:
              - rego: |
                  package k8spsphostnamespace

                  violation[{"msg": msg, "details": {}}] {
                      input_share_hostnamespace(input.review.object)
                      msg := sprintf("Sharing the host namespace is not allowed: %v", [input.review.object.metadata.name])
                  }

                  input_share_hostnamespace(o) {
                      o.spec.hostPID
                  }
                  input_share_hostnamespace(o) {
                      o.spec.hostIPC
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls usage of host network namespace by pod containers.
                  Specific ports must be specified. Corresponds to the `hostNetwork`
                  and `hostPorts` fields in a PodSecurityPolicy. For more information,
                  see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
                metadata.gatekeeper.sh/title: Host Networking Ports
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spsphostnetworkingports
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPHostNetworkingPorts
                  validation:
                    openAPIV3Schema:
                      description: Controls usage of host network namespace by pod
                        containers. Specific ports must be specified. Corresponds
                        to the `hostNetwork` and `hostPorts` fields in a PodSecurityPolicy.
                        For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        hostNetwork:
                          description: Determines if the policy allows the use of
                            HostNetwork in the pod spec.
                          type: boolean
                        max:
                          description: The end of the allowed port range, inclusive.
                          type: integer
                        min:
                          description: The start of the allowed port range, inclusive.
                          type: integer
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spsphostnetworkingports

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg, "details": {}}] {
                      input_share_hostnetwork(input.review.object)
                      msg := sprintf("The specified hostNetwork and hostPort are not allowed, pod: %v. Allowed values: %v", [input.review.object.metadata.name, input.parameters])
                  }

                  input_share_hostnetwork(o) {
                      not input.parameters.hostNetwork
                      o.spec.hostNetwork
                  }

                  input_share_hostnetwork(o) {
                      hostPort := input_containers[_].ports[_].hostPort
                      hostPort < input.parameters.min
                  }

                  input_share_hostnetwork(o) {
                      hostPort := input_containers[_].ports[_].hostPort
                      hostPort > input.parameters.max
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                      not is_exempt(c)
                  }

                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                      not is_exempt(c)
                  }

                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                      not is_exempt(c)
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the ability of any container to enable privileged
                  mode. Corresponds to the `privileged` field in a PodSecurityPolicy.
                  For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged
                metadata.gatekeeper.sh/title: Privileged Container
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspprivilegedcontainer
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPPrivilegedContainer
                  validation:
                    openAPIV3Schema:
                      description: Controls the ability of any container to enable
                        privileged mode. Corresponds to the `privileged` field in
                        a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspprivileged

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg, "details": {}}] {
                      c := input_containers[_]
                      not is_exempt(c)
                      c.securityContext.privileged
                      msg := sprintf("Privileged container is not allowed: %v, securityContext: %v", [c.name, c.securityContext])
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }

                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }

                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the allowed `procMount` types for the container.
                  Corresponds to the `allowedProcMountTypes` field in a PodSecurityPolicy.
                  For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes
                metadata.gatekeeper.sh/title: Proc Mount
                metadata.gatekeeper.sh/version: 1.0.1
              name: k8spspprocmount
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPProcMount
                  validation:
                    openAPIV3Schema:
                      description: Controls the allowed `procMount` types for the
                        container. Corresponds to the `allowedProcMountTypes` field
                        in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#allowedprocmounttypes
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        procMount:
                          description: Defines the strategy for the security exposure
                            of certain paths in `/proc` by the container runtime.
                            Setting to `Default` uses the runtime defaults, where
                            `Unmasked` bypasses the default behavior.
                          enum:
                          - Default
                          - Unmasked
                          type: string
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspprocmount

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg, "details": {}}] {
                      c := input_containers[_]
                      not is_exempt(c)
                      allowedProcMount := get_allowed_proc_mount(input)
                      not input_proc_mount_type_allowed(allowedProcMount, c)
                      msg := sprintf("ProcMount type is not allowed, container: %v. Allowed procMount types: %v", [c.name, allowedProcMount])
                  }

                  input_proc_mount_type_allowed(allowedProcMount, c) {
                      allowedProcMount == "default"
                      lower(c.securityContext.procMount) == "default"
                  }
                  input_proc_mount_type_allowed(allowedProcMount, c) {
                      allowedProcMount == "unmasked"
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                      c.securityContext.procMount
                  }
                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                      c.securityContext.procMount
                  }
                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                      c.securityContext.procMount
                  }

                  get_allowed_proc_mount(arg) = out {
                      not arg.parameters
                      out = "default"
                  }
                  get_allowed_proc_mount(arg) = out {
                      not arg.parameters.procMount
                      out = "default"
                  }
                  get_allowed_proc_mount(arg) = out {
                      arg.parameters.procMount
                      not valid_proc_mount(arg.parameters.procMount)
                      out = "default"
                  }
                  get_allowed_proc_mount(arg) = out {
                      valid_proc_mount(arg.parameters.procMount)
                      out = lower(arg.parameters.procMount)
                  }

                  valid_proc_mount(str) {
                      lower(str) == "default"
                  }
                  valid_proc_mount(str) {
                      lower(str) == "unmasked"
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Requires the use of a read-only root file system by pod
                  containers. Corresponds to the `readOnlyRootFilesystem` field in
                  a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                metadata.gatekeeper.sh/title: Read Only Root Filesystem
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspreadonlyrootfilesystem
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPReadOnlyRootFilesystem
                  validation:
                    openAPIV3Schema:
                      description: Requires the use of a read-only root file system
                        by pod containers. Corresponds to the `readOnlyRootFilesystem`
                        field in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspreadonlyrootfilesystem

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg, "details": {}}] {
                      c := input_containers[_]
                      not is_exempt(c)
                      input_read_only_root_fs(c)
                      msg := sprintf("only read-only root filesystem container is allowed: %v", [c.name])
                  }

                  input_read_only_root_fs(c) {
                      not has_field(c, "securityContext")
                  }
                  input_read_only_root_fs(c) {
                      not c.securityContext.readOnlyRootFilesystem == true
                  }

                  input_containers[c] {
                      c := input.review.object.spec.containers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.initContainers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }

                  # has_field returns whether an object has a field
                  has_field(object, field) = true {
                      object[field]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the seccomp profile used by containers. Corresponds
                  to the `seccomp.security.alpha.kubernetes.io/allowedProfileNames`
                  annotation on a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
                metadata.gatekeeper.sh/title: Seccomp
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspseccomp
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPSeccomp
                  validation:
                    openAPIV3Schema:
                      description: Controls the seccomp profile used by containers.
                        Corresponds to the `seccomp.security.alpha.kubernetes.io/allowedProfileNames`
                        annotation on a PodSecurityPolicy. For more information, see
                        https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
                      properties:
                        allowedLocalhostFiles:
                          description: |-
                            When using securityContext naming scheme for seccomp and including `Localhost` this array holds the allowed profile JSON files.
                            Putting a `*` in this array will allows all JSON files to be used.
                            This field is required to allow `Localhost` in securityContext as with an empty list it will block.
                          items:
                            type: string
                          type: array
                        allowedProfiles:
                          description: |-
                            An array of allowed profile values for seccomp on Pods/Containers.
                            Can use the annotation naming scheme: `runtime/default`, `docker/default`, `unconfined` and/or `localhost/some-profile.json`. The item `localhost/*` will allow any localhost based profile.
                            Can also use the securityContext naming scheme: `RuntimeDefault`, `Unconfined` and/or `Localhost`. For securityContext `Localhost`, use the parameter `allowedLocalhostProfiles` to list the allowed profile JSON files.
                            The policy code will translate between the two schemes so it is not necessary to use both.
                            Putting a `*` in this array allows all Profiles to be used.
                            This field is required since with an empty list this policy will block all workloads.
                          items:
                            type: string
                          type: array
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspseccomp

                  import data.lib.exempt_container.is_exempt

                  container_annotation_key_prefix = "container.seccomp.security.alpha.kubernetes.io/"

                  pod_annotation_key = "seccomp.security.alpha.kubernetes.io/pod"

                  naming_translation = {
                      # securityContext -> annotation
                      "RuntimeDefault": ["runtime/default", "docker/default"],
                      "Unconfined": ["unconfined"],
                      "Localhost": ["localhost"],
                      # annotation -> securityContext
                      "runtime/default": ["RuntimeDefault"],
                      "docker/default": ["RuntimeDefault"],
                      "unconfined": ["Unconfined"],
                      "localhost": ["Localhost"],
                  }

                  violation[{"msg": msg}] {
                      not input_wildcard_allowed_profiles
                      allowed_profiles := get_allowed_profiles
                      container := input_containers[name]
                      not is_exempt(container)
                      result := get_profile(container)
                      not allowed_profile(result.profile, result.file, allowed_profiles)
                      msg := get_message(result.profile, result.file, name, result.location, allowed_profiles)
                  }

                  get_message(profile, file, name, location, allowed_profiles) = message {
                      not profile == "Localhost"
                      message := sprintf("Seccomp profile '%v' is not allowed for container '%v'. Found at: %v. Allowed profiles: %v", [profile, name, location, allowed_profiles])
                  }

                  get_message(profile, file, name, location, allowed_profiles) = message {
                      profile == "Localhost"
                      message := sprintf("Seccomp profile '%v' with file '%v' is not allowed for container '%v'. Found at: %v. Allowed profiles: %v", [profile, file, name, location, allowed_profiles])
                  }

                  input_wildcard_allowed_profiles {
                      input.parameters.allowedProfiles[_] == "*"
                  }

                  input_wildcard_allowed_files {
                      input.parameters.allowedLocalhostFiles[_] == "*"
                  }

                  input_wildcard_allowed_files {
                      "localhost/*" == input.parameters.allowedProfiles[_]
                  }

                  # Simple allowed Profiles
                  allowed_profile(profile, file, allowed) {
                      not startswith(lower(profile), "localhost")
                      profile == allowed[_]
                  }

                  # seccomp Localhost without wildcard
                  allowed_profile(profile, file, allowed) {
                      profile == "Localhost"
                      not input_wildcard_allowed_files
                      profile == allowed[_]
                      allowed_files := {x | x := object.get(input.parameters, "allowedLocalhostFiles", [])[_]} | get_annotation_localhost_files
                      file == allowed_files[_]
                  }

                  # seccomp Localhost with wildcard
                  allowed_profile(profile, file, allowed) {
                      profile == "Localhost"
                      input_wildcard_allowed_files
                      profile == allowed[_]
                  }

                  # annotation localhost with wildcard
                  allowed_profile(profile, file, allowed) {
                      "localhost/*" == allowed[_]
                      startswith(profile, "localhost/")
                  }

                  # annotation localhost without wildcard
                  allowed_profile(profile, file, allowed) {
                      startswith(profile, "localhost/")
                      profile == allowed[_]
                  }

                  # Localhost files from annotation scheme
                  get_annotation_localhost_files[file] {
                      profile := input.parameters.allowedProfiles[_]
                      startswith(profile, "localhost/")
                      file := replace(profile, "localhost/", "")
                  }

                  # The profiles explicitly in the list
                  get_allowed_profiles[allowed] {
                      allowed := input.parameters.allowedProfiles[_]
                  }

                  # The simply translated profiles
                  get_allowed_profiles[allowed] {
                      profile := input.parameters.allowedProfiles[_]
                      not startswith(lower(profile), "localhost")
                      allowed := naming_translation[profile][_]
                  }

                  # Seccomp Localhost to annotation translation
                  get_allowed_profiles[allowed] {
                      profile := input.parameters.allowedProfiles[_]
                      profile == "Localhost"
                      file := object.get(input.parameters, "allowedLocalhostFiles", [])[_]
                      allowed := sprintf("%v/%v", [naming_translation[profile][_], file])
                  }

                  # Annotation localhost to Seccomp translation
                  get_allowed_profiles[allowed] {
                      profile := input.parameters.allowedProfiles[_]
                      startswith(profile, "localhost")
                      allowed := naming_translation.localhost[_]
                  }

                  # Container profile as defined in pod annotation
                  get_profile(container) = {"profile": profile, "file": "", "location": location} {
                      not has_securitycontext_container(container)
                      not has_annotation(get_container_annotation_key(container.name))
                      not has_securitycontext_pod
                      profile := input.review.object.metadata.annotations[pod_annotation_key]
                      location := sprintf("annotation %v", [pod_annotation_key])
                  }

                  # Container profile as defined in container annotation
                  get_profile(container) = {"profile": profile, "file": "", "location": location} {
                      not has_securitycontext_container(container)
                      not has_securitycontext_pod
                      container_annotation := get_container_annotation_key(container.name)
                      has_annotation(container_annotation)
                      profile := input.review.object.metadata.annotations[container_annotation]
                      location := sprintf("annotation %v", [container_annotation])
                  }

                  # Container profile as defined in pods securityContext
                  get_profile(container) = {"profile": profile, "file": file, "location": location} {
                      not has_securitycontext_container(container)
                      profile := input.review.object.spec.securityContext.seccompProfile.type
                      file := object.get(input.review.object.spec.securityContext.seccompProfile, "localhostProfile", "")
                      location := "pod securityContext"
                  }

                  # Container profile as defined in containers securityContext
                  get_profile(container) = {"profile": profile, "file": file, "location": location} {
                      has_securitycontext_container(container)
                      profile := container.securityContext.seccompProfile.type
                      file := object.get(container.securityContext.seccompProfile, "localhostProfile", "")
                      location := "container securityContext"
                  }

                  # Container profile missing
                  get_profile(container) = {"profile": "not configured", "file": "", "location": "no explicit profile found"} {
                      not has_annotation(get_container_annotation_key(container.name))
                      not has_annotation(pod_annotation_key)
                      not has_securitycontext_pod
                      not has_securitycontext_container(container)
                  }

                  has_annotation(annotation) {
                      input.review.object.metadata.annotations[annotation]
                  }

                  has_securitycontext_pod {
                      input.review.object.spec.securityContext.seccompProfile
                  }

                  has_securitycontext_container(container) {
                      container.securityContext.seccompProfile
                  }

                  get_container_annotation_key(name) = annotation {
                      annotation := concat("", [container_annotation_key_prefix, name])
                  }

                  input_containers[container.name] = container {
                      container := input.review.object.spec.containers[_]
                  }

                  input_containers[container.name] = container {
                      container := input.review.object.spec.initContainers[_]
                  }

                  input_containers[container.name] = container {
                      container := input.review.object.spec.ephemeralContainers[_]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Defines an allow-list of seLinuxOptions configurations
                  for pod containers. Corresponds to a PodSecurityPolicy requiring
                  SELinux configs. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#selinux
                metadata.gatekeeper.sh/title: SELinux V2
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspselinuxv2
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPSELinuxV2
                  validation:
                    openAPIV3Schema:
                      description: Defines an allow-list of seLinuxOptions configurations
                        for pod containers. Corresponds to a PodSecurityPolicy requiring
                        SELinux configs. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#selinux
                      properties:
                        allowedSELinuxOptions:
                          description: An allow-list of SELinux options configurations.
                          items:
                            description: An allowed configuration of SELinux options
                              for a pod container.
                            properties:
                              level:
                                description: An SELinux level.
                                type: string
                              role:
                                description: An SELinux role.
                                type: string
                              type:
                                description: An SELinux type.
                                type: string
                              user:
                                description: An SELinux user.
                                type: string
                            type: object
                          type: array
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspselinux

                  import data.lib.exempt_container.is_exempt

                  # Disallow top level custom SELinux options
                  violation[{"msg": msg, "details": {}}] {
                      has_field(input.review.object.spec.securityContext, "seLinuxOptions")
                      not input_seLinuxOptions_allowed(input.review.object.spec.securityContext.seLinuxOptions)
                      msg := sprintf("SELinux options is not allowed, pod: %v. Allowed options: %v", [input.review.object.metadata.name, input.parameters.allowedSELinuxOptions])
                  }
                  # Disallow container level custom SELinux options
                  violation[{"msg": msg, "details": {}}] {
                      c := input_security_context[_]
                      not is_exempt(c)
                      has_field(c.securityContext, "seLinuxOptions")
                      not input_seLinuxOptions_allowed(c.securityContext.seLinuxOptions)
                      msg := sprintf("SELinux options is not allowed, pod: %v, container %v. Allowed options: %v", [input.review.object.metadata.name, c.name, input.parameters.allowedSELinuxOptions])
                  }

                  input_seLinuxOptions_allowed(options) {
                      params := input.parameters.allowedSELinuxOptions[_]
                      field_allowed("level", options, params)
                      field_allowed("role", options, params)
                      field_allowed("type", options, params)
                      field_allowed("user", options, params)
                  }

                  field_allowed(field, options, params) {
                      params[field] == options[field]
                  }
                  field_allowed(field, options, params) {
                      not has_field(options, field)
                  }

                  input_security_context[c] {
                      c := input.review.object.spec.containers[_]
                      has_field(c.securityContext, "seLinuxOptions")
                  }
                  input_security_context[c] {
                      c := input.review.object.spec.initContainers[_]
                      has_field(c.securityContext, "seLinuxOptions")
                  }
                  input_security_context[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                      has_field(c.securityContext, "seLinuxOptions")
                  }

                  # has_field returns whether an object has a field
                  has_field(object, field) = true {
                      object[field]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Controls the user and group IDs of the container and
                  some volumes. Corresponds to the `runAsUser`, `runAsGroup`, `supplementalGroups`,
                  and `fsGroup` fields in a PodSecurityPolicy. For more information,
                  see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups
                metadata.gatekeeper.sh/title: Allowed Users
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspallowedusers
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPAllowedUsers
                  validation:
                    openAPIV3Schema:
                      description: Controls the user and group IDs of the container
                        and some volumes. Corresponds to the `runAsUser`, `runAsGroup`,
                        `supplementalGroups`, and `fsGroup` fields in a PodSecurityPolicy.
                        For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#users-and-groups
                      properties:
                        exemptImages:
                          description: |-
                            Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                            It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
                          items:
                            type: string
                          type: array
                        fsGroup:
                          description: Controls the fsGroup values that are allowed
                            in a Pod or container-level SecurityContext.
                          properties:
                            ranges:
                              description: A list of group ID ranges affected by the
                                rule.
                              items:
                                description: The range of group IDs affected by the
                                  rule.
                                properties:
                                  max:
                                    description: The maximum group ID in the range,
                                      inclusive.
                                    type: integer
                                  min:
                                    description: The minimum group ID in the range,
                                      inclusive.
                                    type: integer
                                type: object
                              type: array
                            rule:
                              description: A strategy for applying the fsGroup restriction.
                              enum:
                              - MustRunAs
                              - MayRunAs
                              - RunAsAny
                              type: string
                          type: object
                        runAsGroup:
                          description: Controls which group ID values are allowed
                            in a Pod or container-level SecurityContext.
                          properties:
                            ranges:
                              description: A list of group ID ranges affected by the
                                rule.
                              items:
                                description: The range of group IDs affected by the
                                  rule.
                                properties:
                                  max:
                                    description: The maximum group ID in the range,
                                      inclusive.
                                    type: integer
                                  min:
                                    description: The minimum group ID in the range,
                                      inclusive.
                                    type: integer
                                type: object
                              type: array
                            rule:
                              description: A strategy for applying the runAsGroup
                                restriction.
                              enum:
                              - MustRunAs
                              - MayRunAs
                              - RunAsAny
                              type: string
                          type: object
                        runAsUser:
                          description: Controls which user ID values are allowed in
                            a Pod or container-level SecurityContext.
                          properties:
                            ranges:
                              description: A list of user ID ranges affected by the
                                rule.
                              items:
                                description: The range of user IDs affected by the
                                  rule.
                                properties:
                                  max:
                                    description: The maximum user ID in the range,
                                      inclusive.
                                    type: integer
                                  min:
                                    description: The minimum user ID in the range,
                                      inclusive.
                                    type: integer
                                type: object
                              type: array
                            rule:
                              description: A strategy for applying the runAsUser restriction.
                              enum:
                              - MustRunAs
                              - MustRunAsNonRoot
                              - RunAsAny
                              type: string
                          type: object
                        supplementalGroups:
                          description: Controls the supplementalGroups values that
                            are allowed in a Pod or container-level SecurityContext.
                          properties:
                            ranges:
                              description: A list of group ID ranges affected by the
                                rule.
                              items:
                                description: The range of group IDs affected by the
                                  rule.
                                properties:
                                  max:
                                    description: The maximum group ID in the range,
                                      inclusive.
                                    type: integer
                                  min:
                                    description: The minimum group ID in the range,
                                      inclusive.
                                    type: integer
                                type: object
                              type: array
                            rule:
                              description: A strategy for applying the supplementalGroups
                                restriction.
                              enum:
                              - MustRunAs
                              - MayRunAs
                              - RunAsAny
                              type: string
                          type: object
                      type: object
              targets:
              - libs:
                - |
                  package lib.exempt_container

                  is_exempt(container) {
                      exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                      img := container.image
                      exemption := exempt_images[_]
                      _matches_exemption(img, exemption)
                  }

                  _matches_exemption(img, exemption) {
                      not endswith(exemption, "*")
                      exemption == img
                  }

                  _matches_exemption(img, exemption) {
                      endswith(exemption, "*")
                      prefix := trim_suffix(exemption, "*")
                      startswith(img, prefix)
                  }
                rego: |
                  package k8spspallowedusers

                  import data.lib.exempt_container.is_exempt

                  violation[{"msg": msg}] {
                    fields := ["runAsUser", "runAsGroup", "supplementalGroups", "fsGroup"]
                    field := fields[_]
                    container := input_containers[_]
                    not is_exempt(container)
                    msg := get_type_violation(field, container)
                  }

                  get_type_violation(field, container) = msg {
                    field == "runAsUser"
                    params := input.parameters[field]
                    msg := get_user_violation(params, container)
                  }

                  get_type_violation(field, container) = msg {
                    field != "runAsUser"
                    params := input.parameters[field]
                    msg := get_violation(field, params, container)
                  }

                  # RunAsUser (separate due to "MustRunAsNonRoot")
                  get_user_violation(params, container) = msg {
                    rule := params.rule
                    provided_user := get_field_value("runAsUser", container, input.review)
                    not accept_users(rule, provided_user)
                    msg := sprintf("Container %v is attempting to run as disallowed user %v. Allowed runAsUser: %v", [container.name, provided_user, params])
                  }

                  get_user_violation(params, container) = msg {
                    not get_field_value("runAsUser", container, input.review)
                    params.rule = "MustRunAs"
                    msg := sprintf("Container %v is attempting to run without a required securityContext/runAsUser", [container.name])
                  }

                  get_user_violation(params, container) = msg {
                    params.rule = "MustRunAsNonRoot"
                    not get_field_value("runAsUser", container, input.review)
                    not get_field_value("runAsNonRoot", container, input.review)
                    msg := sprintf("Container %v is attempting to run without a required securityContext/runAsNonRoot or securityContext/runAsUser != 0", [container.name])
                  }

                  accept_users("RunAsAny", provided_user) {true}

                  accept_users("MustRunAsNonRoot", provided_user) = res {res := provided_user != 0}

                  accept_users("MustRunAs", provided_user) = res  {
                    ranges := input.parameters.runAsUser.ranges
                    res := is_in_range(provided_user, ranges)
                  }

                  # Group Options
                  get_violation(field, params, container) = msg {
                    rule := params.rule
                    provided_value := get_field_value(field, container, input.review)
                    not is_array(provided_value)
                    not accept_value(rule, provided_value, params.ranges)
                    msg := sprintf("Container %v is attempting to run as disallowed group %v. Allowed %v: %v", [container.name, provided_value, field, params])
                  }
                  # SupplementalGroups is array value
                  get_violation(field, params, container) = msg {
                    rule := params.rule
                    array_value := get_field_value(field, container, input.review)
                    is_array(array_value)
                    provided_value := array_value[_]
                    not accept_value(rule, provided_value, params.ranges)
                    msg := sprintf("Container %v is attempting to run with disallowed supplementalGroups %v. Allowed %v: %v", [container.name, array_value, field, params])
                  }

                  get_violation(field, params, container) = msg {
                    not get_field_value(field, container, input.review)
                    params.rule == "MustRunAs"
                    msg := sprintf("Container %v is attempting to run without a required securityContext/%v. Allowed %v: %v", [container.name, field, field, params])
                  }

                  accept_value("RunAsAny", provided_value, ranges) {true}

                  accept_value("MayRunAs", provided_value, ranges) = res { res := is_in_range(provided_value, ranges)}

                  accept_value("MustRunAs", provided_value, ranges) = res { res := is_in_range(provided_value, ranges)}


                  # If container level is provided, that takes precedence
                  get_field_value(field, container, review) = out {
                    container_value := get_seccontext_field(field, container)
                    out := container_value
                  }

                  # If no container level exists, use pod level
                  get_field_value(field, container, review) = out {
                    not has_seccontext_field(field, container)
                    review.kind.kind == "Pod"
                    pod_value := get_seccontext_field(field, review.object.spec)
                    out := pod_value
                  }

                  # Helper Functions
                  is_in_range(val, ranges) = res {
                    matching := {1 | val >= ranges[j].min; val <= ranges[j].max}
                    res := count(matching) > 0
                  }

                  has_seccontext_field(field, obj) {
                    get_seccontext_field(field, obj)
                  }

                  has_seccontext_field(field, obj) {
                    get_seccontext_field(field, obj) == false
                  }

                  get_seccontext_field(field, obj) = out {
                    out = obj.securityContext[field]
                  }

                  input_containers[c] {
                    c := input.review.object.spec.containers[_]
                  }
                  input_containers[c] {
                    c := input.review.object.spec.initContainers[_]
                  }
                  input_containers[c] {
                      c := input.review.object.spec.ephemeralContainers[_]
                  }
                target: admission.k8s.gatekeeper.sh
        - complianceType: musthave
          objectDefinition:
            apiVersion: templates.gatekeeper.sh/v1
            kind: ConstraintTemplate
            metadata:
              annotations:
                description: Restricts mountable volume types to those specified by
                  the user. Corresponds to the `volumes` field in a PodSecurityPolicy.
                  For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                metadata.gatekeeper.sh/title: Volume Types
                metadata.gatekeeper.sh/version: 1.0.0
              name: k8spspvolumetypes
            spec:
              crd:
                spec:
                  names:
                    kind: K8sPSPVolumeTypes
                  validation:
                    openAPIV3Schema:
                      description: Restricts mountable volume types to those specified
                        by the user. Corresponds to the `volumes` field in a PodSecurityPolicy.
                        For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
                      properties:
                        volumes:
                          description: '`volumes` is an array of volume types. All
                            volume types can be enabled using `*`.'
                          items:
                            type: string
                          type: array
                      type: object
              targets:
              - rego: |
                  package k8spspvolumetypes

                  violation[{"msg": msg, "details": {}}] {
                      volume_fields := {x | input.review.object.spec.volumes[_][x]; x != "name"}
                      field := volume_fields[_]
                      not input_volume_type_allowed(field)
                      msg := sprintf("The volume type %v is not allowed, pod: %v. Allowed volume types: %v", [field, input.review.object.metadata.name, input.parameters.volumes])
                  }

                  # * may be used to allow all volume types
                  input_volume_type_allowed(field) {
                      input.parameters.volumes[_] == "*"
                  }

                  input_volume_type_allowed(field) {
                      field == input.parameters.volumes[_]
                  }
                target: admission.k8s.gatekeeper.sh
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    env: prod
  name: policy-install-gatekeeper
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-install-gatekeeper
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              labels:
                admission.gatekeeper.sh/ignore: no-self-managing
                control-plane: controller-manager
                gatekeeper.sh/system: "yes"
                pod-security.kubernetes.io/audit: baseline
                pod-security.kubernetes.io/audit-version: latest
                pod-security.kubernetes.io/enforce: privileged
                pod-security.kubernetes.io/enforce-version: v1.24
                pod-security.kubernetes.io/warn: baseline
                pod-security.kubernetes.io/warn-version: latest
              name: gatekeeper-system
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: ResourceQuota
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-critical-pods
              namespace: gatekeeper-system
            spec:
              hard:
                pods: "100"
              scopeSelector:
                matchExpressions:
                - operator: In
                  scopeName: PriorityClass
                  values:
                  - system-cluster-critical
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: assign.mutations.gatekeeper.sh
            spec:
              group: mutations.gatekeeper.sh
              names:
                kind: Assign
                listKind: AssignList
                plural: assign
                singular: assign
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - name: v1
                schema:
                  openAPIV3Schema:
                    description: Assign is the Schema for the assign API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        properties:
                          name:
                            maxLength: 63
                            type: string
                        type: object
                      spec:
                        description: AssignSpec defines the desired state of Assign.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main]`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              assign:
                                description: Assign.value holds the value to be assigned
                                properties:
                                  externalData:
                                    description: ExternalData describes the external
                                      data provider to be used for mutation.
                                    properties:
                                      dataSource:
                                        default: ValueAtLocation
                                        description: DataSource specifies where to
                                          extract the data that will be sent to the
                                          external data provider as parameters.
                                        enum:
                                        - ValueAtLocation
                                        - Username
                                        type: string
                                      default:
                                        description: Default specifies the default
                                          value to use when the external data provider
                                          returns an error and the failure policy
                                          is set to "UseDefault".
                                        type: string
                                      failurePolicy:
                                        default: Fail
                                        description: FailurePolicy specifies the policy
                                          to apply when the external data provider
                                          returns an error.
                                        enum:
                                        - UseDefault
                                        - Ignore
                                        - Fail
                                        type: string
                                      provider:
                                        description: Provider is the name of the external
                                          data provider.
                                        type: string
                                    type: object
                                  fromMetadata:
                                    description: FromMetadata assigns a value from
                                      the specified metadata field.
                                    properties:
                                      field:
                                        description: Field specifies which metadata
                                          field provides the assigned value. Valid
                                          fields are `namespace` and `name`.
                                        type: string
                                    type: object
                                  value:
                                    description: Value is a constant value that will
                                      be assigned to `location`
                                    x-kubernetes-preserve-unknown-fields: true
                                type: object
                              pathTests:
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                            type: object
                        type: object
                      status:
                        description: AssignStatus defines the observed state of Assign.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
                subresources:
                  status: {}
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: Assign is the Schema for the assign API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: AssignSpec defines the desired state of Assign.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main]`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              assign:
                                description: Assign.value holds the value to be assigned
                                properties:
                                  externalData:
                                    description: ExternalData describes the external
                                      data provider to be used for mutation.
                                    properties:
                                      dataSource:
                                        default: ValueAtLocation
                                        description: DataSource specifies where to
                                          extract the data that will be sent to the
                                          external data provider as parameters.
                                        enum:
                                        - ValueAtLocation
                                        - Username
                                        type: string
                                      default:
                                        description: Default specifies the default
                                          value to use when the external data provider
                                          returns an error and the failure policy
                                          is set to "UseDefault".
                                        type: string
                                      failurePolicy:
                                        default: Fail
                                        description: FailurePolicy specifies the policy
                                          to apply when the external data provider
                                          returns an error.
                                        enum:
                                        - UseDefault
                                        - Ignore
                                        - Fail
                                        type: string
                                      provider:
                                        description: Provider is the name of the external
                                          data provider.
                                        type: string
                                    type: object
                                  fromMetadata:
                                    description: FromMetadata assigns a value from
                                      the specified metadata field.
                                    properties:
                                      field:
                                        description: Field specifies which metadata
                                          field provides the assigned value. Valid
                                          fields are `namespace` and `name`.
                                        type: string
                                    type: object
                                  value:
                                    description: Value is a constant value that will
                                      be assigned to `location`
                                    x-kubernetes-preserve-unknown-fields: true
                                type: object
                              pathTests:
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                            type: object
                        type: object
                      status:
                        description: AssignStatus defines the observed state of Assign.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: Assign is the Schema for the assign API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: AssignSpec defines the desired state of Assign.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main]`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              assign:
                                description: Assign.value holds the value to be assigned
                                properties:
                                  externalData:
                                    description: ExternalData describes the external
                                      data provider to be used for mutation.
                                    properties:
                                      dataSource:
                                        default: ValueAtLocation
                                        description: DataSource specifies where to
                                          extract the data that will be sent to the
                                          external data provider as parameters.
                                        enum:
                                        - ValueAtLocation
                                        - Username
                                        type: string
                                      default:
                                        description: Default specifies the default
                                          value to use when the external data provider
                                          returns an error and the failure policy
                                          is set to "UseDefault".
                                        type: string
                                      failurePolicy:
                                        default: Fail
                                        description: FailurePolicy specifies the policy
                                          to apply when the external data provider
                                          returns an error.
                                        enum:
                                        - UseDefault
                                        - Ignore
                                        - Fail
                                        type: string
                                      provider:
                                        description: Provider is the name of the external
                                          data provider.
                                        type: string
                                    type: object
                                  fromMetadata:
                                    description: FromMetadata assigns a value from
                                      the specified metadata field.
                                    properties:
                                      field:
                                        description: Field specifies which metadata
                                          field provides the assigned value. Valid
                                          fields are `namespace` and `name`.
                                        type: string
                                    type: object
                                  value:
                                    description: Value is a constant value that will
                                      be assigned to `location`
                                    x-kubernetes-preserve-unknown-fields: true
                                type: object
                              pathTests:
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                            type: object
                        type: object
                      status:
                        description: AssignStatus defines the observed state of Assign.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: assignimage.mutations.gatekeeper.sh
            spec:
              group: mutations.gatekeeper.sh
              names:
                kind: AssignImage
                listKind: AssignImageList
                plural: assignimage
                singular: assignimage
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: AssignImage is the Schema for the assignimage API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        properties:
                          name:
                            maxLength: 63
                            type: string
                        type: object
                      spec:
                        description: AssignImageSpec defines the desired state of
                          AssignImage.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main].image`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              assignDomain:
                                description: AssignDomain sets the domain component
                                  on an image string. The trailing slash should not
                                  be included.
                                type: string
                              assignPath:
                                description: AssignPath sets the domain component
                                  on an image string.
                                type: string
                              assignTag:
                                description: AssignImage sets the image component
                                  on an image string. It must start with a `:` or
                                  `@`.
                                type: string
                              pathTests:
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                            type: object
                        type: object
                      status:
                        description: AssignImageStatus defines the observed state
                          of AssignImage.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
                subresources:
                  status: {}
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: assignmetadata.mutations.gatekeeper.sh
            spec:
              group: mutations.gatekeeper.sh
              names:
                kind: AssignMetadata
                listKind: AssignMetadataList
                plural: assignmetadata
                singular: assignmetadata
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - name: v1
                schema:
                  openAPIV3Schema:
                    description: AssignMetadata is the Schema for the assignmetadata
                      API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        properties:
                          name:
                            maxLength: 63
                            type: string
                        type: object
                      spec:
                        description: AssignMetadataSpec defines the desired state
                          of AssignMetadata.
                        properties:
                          location:
                            type: string
                          match:
                            description: Match selects which objects are in scope.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            properties:
                              assign:
                                description: Assign.value holds the value to be assigned
                                properties:
                                  externalData:
                                    description: ExternalData describes the external
                                      data provider to be used for mutation.
                                    properties:
                                      dataSource:
                                        default: ValueAtLocation
                                        description: DataSource specifies where to
                                          extract the data that will be sent to the
                                          external data provider as parameters.
                                        enum:
                                        - ValueAtLocation
                                        - Username
                                        type: string
                                      default:
                                        description: Default specifies the default
                                          value to use when the external data provider
                                          returns an error and the failure policy
                                          is set to "UseDefault".
                                        type: string
                                      failurePolicy:
                                        default: Fail
                                        description: FailurePolicy specifies the policy
                                          to apply when the external data provider
                                          returns an error.
                                        enum:
                                        - UseDefault
                                        - Ignore
                                        - Fail
                                        type: string
                                      provider:
                                        description: Provider is the name of the external
                                          data provider.
                                        type: string
                                    type: object
                                  fromMetadata:
                                    description: FromMetadata assigns a value from
                                      the specified metadata field.
                                    properties:
                                      field:
                                        description: Field specifies which metadata
                                          field provides the assigned value. Valid
                                          fields are `namespace` and `name`.
                                        type: string
                                    type: object
                                  value:
                                    description: Value is a constant value that will
                                      be assigned to `location`
                                    x-kubernetes-preserve-unknown-fields: true
                                type: object
                            type: object
                        type: object
                      status:
                        description: AssignMetadataStatus defines the observed state
                          of AssignMetadata.
                        properties:
                          byPod:
                            description: 'INSERT ADDITIONAL STATUS FIELD - define
                              observed state of cluster Important: Run "make" to regenerate
                              code after modifying this file'
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
                subresources:
                  status: {}
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: AssignMetadata is the Schema for the assignmetadata
                      API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: AssignMetadataSpec defines the desired state
                          of AssignMetadata.
                        properties:
                          location:
                            type: string
                          match:
                            description: Match selects which objects are in scope.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            properties:
                              assign:
                                description: Assign.value holds the value to be assigned
                                properties:
                                  externalData:
                                    description: ExternalData describes the external
                                      data provider to be used for mutation.
                                    properties:
                                      dataSource:
                                        default: ValueAtLocation
                                        description: DataSource specifies where to
                                          extract the data that will be sent to the
                                          external data provider as parameters.
                                        enum:
                                        - ValueAtLocation
                                        - Username
                                        type: string
                                      default:
                                        description: Default specifies the default
                                          value to use when the external data provider
                                          returns an error and the failure policy
                                          is set to "UseDefault".
                                        type: string
                                      failurePolicy:
                                        default: Fail
                                        description: FailurePolicy specifies the policy
                                          to apply when the external data provider
                                          returns an error.
                                        enum:
                                        - UseDefault
                                        - Ignore
                                        - Fail
                                        type: string
                                      provider:
                                        description: Provider is the name of the external
                                          data provider.
                                        type: string
                                    type: object
                                  fromMetadata:
                                    description: FromMetadata assigns a value from
                                      the specified metadata field.
                                    properties:
                                      field:
                                        description: Field specifies which metadata
                                          field provides the assigned value. Valid
                                          fields are `namespace` and `name`.
                                        type: string
                                    type: object
                                  value:
                                    description: Value is a constant value that will
                                      be assigned to `location`
                                    x-kubernetes-preserve-unknown-fields: true
                                type: object
                            type: object
                        type: object
                      status:
                        description: AssignMetadataStatus defines the observed state
                          of AssignMetadata.
                        properties:
                          byPod:
                            description: 'INSERT ADDITIONAL STATUS FIELD - define
                              observed state of cluster Important: Run "make" to regenerate
                              code after modifying this file'
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: AssignMetadata is the Schema for the assignmetadata
                      API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: AssignMetadataSpec defines the desired state
                          of AssignMetadata.
                        properties:
                          location:
                            type: string
                          match:
                            description: Match selects which objects are in scope.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            properties:
                              assign:
                                description: Assign.value holds the value to be assigned
                                properties:
                                  externalData:
                                    description: ExternalData describes the external
                                      data provider to be used for mutation.
                                    properties:
                                      dataSource:
                                        default: ValueAtLocation
                                        description: DataSource specifies where to
                                          extract the data that will be sent to the
                                          external data provider as parameters.
                                        enum:
                                        - ValueAtLocation
                                        - Username
                                        type: string
                                      default:
                                        description: Default specifies the default
                                          value to use when the external data provider
                                          returns an error and the failure policy
                                          is set to "UseDefault".
                                        type: string
                                      failurePolicy:
                                        default: Fail
                                        description: FailurePolicy specifies the policy
                                          to apply when the external data provider
                                          returns an error.
                                        enum:
                                        - UseDefault
                                        - Ignore
                                        - Fail
                                        type: string
                                      provider:
                                        description: Provider is the name of the external
                                          data provider.
                                        type: string
                                    type: object
                                  fromMetadata:
                                    description: FromMetadata assigns a value from
                                      the specified metadata field.
                                    properties:
                                      field:
                                        description: Field specifies which metadata
                                          field provides the assigned value. Valid
                                          fields are `namespace` and `name`.
                                        type: string
                                    type: object
                                  value:
                                    description: Value is a constant value that will
                                      be assigned to `location`
                                    x-kubernetes-preserve-unknown-fields: true
                                type: object
                            type: object
                        type: object
                      status:
                        description: AssignMetadataStatus defines the observed state
                          of AssignMetadata.
                        properties:
                          byPod:
                            description: 'INSERT ADDITIONAL STATUS FIELD - define
                              observed state of cluster Important: Run "make" to regenerate
                              code after modifying this file'
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: configs.config.gatekeeper.sh
            spec:
              group: config.gatekeeper.sh
              names:
                kind: Config
                listKind: ConfigList
                plural: configs
                singular: config
              preserveUnknownFields: false
              scope: Namespaced
              versions:
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: Config is the Schema for the configs API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ConfigSpec defines the desired state of Config.
                        properties:
                          match:
                            description: Configuration for namespace exclusion
                            items:
                              properties:
                                excludedNamespaces:
                                  items:
                                    description: 'A string that supports globbing
                                      at its front or end. Ex: "kube-*" will match
                                      "kube-system" or "kube-public", "*-system" will
                                      match "kube-system" or "gatekeeper-system".  The
                                      asterisk is required for wildcard matching.'
                                    pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                    type: string
                                  type: array
                                processes:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          readiness:
                            description: Configuration for readiness tracker
                            properties:
                              statsEnabled:
                                type: boolean
                            type: object
                          sync:
                            description: Configuration for syncing k8s objects
                            properties:
                              syncOnly:
                                description: If non-empty, only entries on this list
                                  will be replicated into OPA
                                items:
                                  properties:
                                    group:
                                      type: string
                                    kind:
                                      type: string
                                    version:
                                      type: string
                                  type: object
                                type: array
                            type: object
                          validation:
                            description: Configuration for validation
                            properties:
                              traces:
                                description: List of requests to trace. Both "user"
                                  and "kinds" must be specified
                                items:
                                  properties:
                                    dump:
                                      description: Also dump the state of OPA with
                                        the trace. Set to `All` to dump everything.
                                      type: string
                                    kind:
                                      description: Only trace requests of the following
                                        GroupVersionKind
                                      properties:
                                        group:
                                          type: string
                                        kind:
                                          type: string
                                        version:
                                          type: string
                                      type: object
                                    user:
                                      description: Only trace requests from the specified
                                        user
                                      type: string
                                  type: object
                                type: array
                            type: object
                        type: object
                      status:
                        description: ConfigStatus defines the observed state of Config.
                        type: object
                    type: object
                served: true
                storage: true
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: constraintpodstatuses.status.gatekeeper.sh
            spec:
              group: status.gatekeeper.sh
              names:
                kind: ConstraintPodStatus
                listKind: ConstraintPodStatusList
                plural: constraintpodstatuses
                singular: constraintpodstatus
              preserveUnknownFields: false
              scope: Namespaced
              versions:
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: ConstraintPodStatus is the Schema for the constraintpodstatuses
                      API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      status:
                        description: ConstraintPodStatusStatus defines the observed
                          state of ConstraintPodStatus.
                        properties:
                          constraintUID:
                            description: Storing the constraint UID allows us to detect
                              drift, such as when a constraint has been recreated
                              after its CRD was deleted out from under it, interrupting
                              the watch
                            type: string
                          enforced:
                            type: boolean
                          errors:
                            items:
                              description: Error represents a single error caught
                                while adding a constraint to OPA.
                              properties:
                                code:
                                  type: string
                                location:
                                  type: string
                                message:
                                  type: string
                              required:
                              - code
                              - message
                              type: object
                            type: array
                          id:
                            type: string
                          observedGeneration:
                            format: int64
                            type: integer
                          operations:
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: constrainttemplatepodstatuses.status.gatekeeper.sh
            spec:
              group: status.gatekeeper.sh
              names:
                kind: ConstraintTemplatePodStatus
                listKind: ConstraintTemplatePodStatusList
                plural: constrainttemplatepodstatuses
                singular: constrainttemplatepodstatus
              preserveUnknownFields: false
              scope: Namespaced
              versions:
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: ConstraintTemplatePodStatus is the Schema for the
                      constrainttemplatepodstatuses API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      status:
                        description: ConstraintTemplatePodStatusStatus defines the
                          observed state of ConstraintTemplatePodStatus.
                        properties:
                          errors:
                            items:
                              description: CreateCRDError represents a single error
                                caught during parsing, compiling, etc.
                              properties:
                                code:
                                  type: string
                                location:
                                  type: string
                                message:
                                  type: string
                              required:
                              - code
                              - message
                              type: object
                            type: array
                          id:
                            description: 'Important: Run "make" to regenerate code
                              after modifying this file'
                            type: string
                          observedGeneration:
                            format: int64
                            type: integer
                          operations:
                            items:
                              type: string
                            type: array
                          templateUID:
                            description: UID is a type that holds unique ID values,
                              including UUIDs.  Because we don't ONLY use UUIDs, this
                              is an alias to string.  Being a type captures intent
                              and helps make sure that UIDs and names do not get conflated.
                            type: string
                        type: object
                    type: object
                served: true
                storage: true
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.11.3
              labels:
                gatekeeper.sh/system: "yes"
              name: constrainttemplates.templates.gatekeeper.sh
            spec:
              group: templates.gatekeeper.sh
              names:
                kind: ConstraintTemplate
                listKind: ConstraintTemplateList
                plural: constrainttemplates
                singular: constrainttemplate
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - name: v1
                schema:
                  openAPIV3Schema:
                    description: ConstraintTemplate is the Schema for the constrainttemplates
                      API
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ConstraintTemplateSpec defines the desired state
                          of ConstraintTemplate.
                        properties:
                          crd:
                            properties:
                              spec:
                                properties:
                                  names:
                                    properties:
                                      kind:
                                        type: string
                                      shortNames:
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  validation:
                                    default:
                                      legacySchema: false
                                    properties:
                                      legacySchema:
                                        default: false
                                        type: boolean
                                      openAPIV3Schema:
                                        type: object
                                        x-kubernetes-preserve-unknown-fields: true
                                    type: object
                                type: object
                            type: object
                          targets:
                            items:
                              properties:
                                code:
                                  description: The source code options for the constraint
                                    template. "Rego" can only be specified in one
                                    place (either here or in the "rego" field)
                                  items:
                                    properties:
                                      engine:
                                        description: 'The engine used to evaluate
                                          the code. Example: "Rego". Required.'
                                        type: string
                                      source:
                                        description: The source code for the template.
                                          Required.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - engine
                                    - source
                                    type: object
                                  type: array
                                  x-kubernetes-list-map-keys:
                                  - engine
                                  x-kubernetes-list-type: map
                                libs:
                                  items:
                                    type: string
                                  type: array
                                rego:
                                  type: string
                                target:
                                  type: string
                              type: object
                            type: array
                        type: object
                      status:
                        description: ConstraintTemplateStatus defines the observed
                          state of ConstraintTemplate.
                        properties:
                          byPod:
                            items:
                              description: ByPodStatus defines the observed state
                                of ConstraintTemplate as seen by an individual controller
                              properties:
                                errors:
                                  items:
                                    description: CreateCRDError represents a single
                                      error caught during parsing, compiling, etc.
                                    properties:
                                      code:
                                        type: string
                                      location:
                                        type: string
                                      message:
                                        type: string
                                    required:
                                    - code
                                    - message
                                    type: object
                                  type: array
                                id:
                                  description: a unique identifier for the pod that
                                    wrote the status
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                            type: array
                          created:
                            type: boolean
                        type: object
                    type: object
                served: true
                storage: true
                subresources:
                  status: {}
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: ConstraintTemplate is the Schema for the constrainttemplates
                      API
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ConstraintTemplateSpec defines the desired state
                          of ConstraintTemplate.
                        properties:
                          crd:
                            properties:
                              spec:
                                properties:
                                  names:
                                    properties:
                                      kind:
                                        type: string
                                      shortNames:
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  validation:
                                    default:
                                      legacySchema: true
                                    properties:
                                      legacySchema:
                                        default: true
                                        type: boolean
                                      openAPIV3Schema:
                                        type: object
                                        x-kubernetes-preserve-unknown-fields: true
                                    type: object
                                type: object
                            type: object
                          targets:
                            items:
                              properties:
                                code:
                                  description: The source code options for the constraint
                                    template. "Rego" can only be specified in one
                                    place (either here or in the "rego" field)
                                  items:
                                    properties:
                                      engine:
                                        description: 'The engine used to evaluate
                                          the code. Example: "Rego". Required.'
                                        type: string
                                      source:
                                        description: The source code for the template.
                                          Required.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - engine
                                    - source
                                    type: object
                                  type: array
                                  x-kubernetes-list-map-keys:
                                  - engine
                                  x-kubernetes-list-type: map
                                libs:
                                  items:
                                    type: string
                                  type: array
                                rego:
                                  type: string
                                target:
                                  type: string
                              type: object
                            type: array
                        type: object
                      status:
                        description: ConstraintTemplateStatus defines the observed
                          state of ConstraintTemplate.
                        properties:
                          byPod:
                            items:
                              description: ByPodStatus defines the observed state
                                of ConstraintTemplate as seen by an individual controller
                              properties:
                                errors:
                                  items:
                                    description: CreateCRDError represents a single
                                      error caught during parsing, compiling, etc.
                                    properties:
                                      code:
                                        type: string
                                      location:
                                        type: string
                                      message:
                                        type: string
                                    required:
                                    - code
                                    - message
                                    type: object
                                  type: array
                                id:
                                  description: a unique identifier for the pod that
                                    wrote the status
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                            type: array
                          created:
                            type: boolean
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: ConstraintTemplate is the Schema for the constrainttemplates
                      API
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ConstraintTemplateSpec defines the desired state
                          of ConstraintTemplate.
                        properties:
                          crd:
                            properties:
                              spec:
                                properties:
                                  names:
                                    properties:
                                      kind:
                                        type: string
                                      shortNames:
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  validation:
                                    default:
                                      legacySchema: true
                                    properties:
                                      legacySchema:
                                        default: true
                                        type: boolean
                                      openAPIV3Schema:
                                        type: object
                                        x-kubernetes-preserve-unknown-fields: true
                                    type: object
                                type: object
                            type: object
                          targets:
                            items:
                              properties:
                                code:
                                  description: The source code options for the constraint
                                    template. "Rego" can only be specified in one
                                    place (either here or in the "rego" field)
                                  items:
                                    properties:
                                      engine:
                                        description: 'The engine used to evaluate
                                          the code. Example: "Rego". Required.'
                                        type: string
                                      source:
                                        description: The source code for the template.
                                          Required.
                                        x-kubernetes-preserve-unknown-fields: true
                                    required:
                                    - engine
                                    - source
                                    type: object
                                  type: array
                                  x-kubernetes-list-map-keys:
                                  - engine
                                  x-kubernetes-list-type: map
                                libs:
                                  items:
                                    type: string
                                  type: array
                                rego:
                                  type: string
                                target:
                                  type: string
                              type: object
                            type: array
                        type: object
                      status:
                        description: ConstraintTemplateStatus defines the observed
                          state of ConstraintTemplate.
                        properties:
                          byPod:
                            items:
                              description: ByPodStatus defines the observed state
                                of ConstraintTemplate as seen by an individual controller
                              properties:
                                errors:
                                  items:
                                    description: CreateCRDError represents a single
                                      error caught during parsing, compiling, etc.
                                    properties:
                                      code:
                                        type: string
                                      location:
                                        type: string
                                      message:
                                        type: string
                                    required:
                                    - code
                                    - message
                                    type: object
                                  type: array
                                id:
                                  description: a unique identifier for the pod that
                                    wrote the status
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                            type: array
                          created:
                            type: boolean
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: expansiontemplate.expansion.gatekeeper.sh
            spec:
              group: expansion.gatekeeper.sh
              names:
                kind: ExpansionTemplate
                listKind: ExpansionTemplateList
                plural: expansiontemplate
                singular: expansiontemplate
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: ExpansionTemplate is the Schema for the ExpansionTemplate
                      API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ExpansionTemplateSpec defines the desired state
                          of ExpansionTemplate.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds of generator resources which will be expanded.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          enforcementAction:
                            description: EnforcementAction specifies the enforcement
                              action to be used for resources matching the ExpansionTemplate.
                              Specifying an empty value will use the enforcement action
                              specified by the Constraint in violation.
                            type: string
                          generatedGVK:
                            description: GeneratedGVK specifies the GVK of the resources
                              which the generator resource creates.
                            properties:
                              group:
                                type: string
                              kind:
                                type: string
                              version:
                                type: string
                            type: object
                          templateSource:
                            description: TemplateSource specifies the source field
                              on the generator resource to use as the base for expanded
                              resource. For Pod-creating generators, this is usually
                              spec.template
                            type: string
                        type: object
                      status:
                        description: ExpansionTemplateStatus defines the observed
                          state of ExpansionTemplate.
                        properties:
                          byPod:
                            items:
                              description: ExpansionTemplatePodStatusStatus defines
                                the observed state of ExpansionTemplatePodStatus.
                              properties:
                                errors:
                                  items:
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  description: 'Important: Run "make" to regenerate
                                    code after modifying this file'
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                                templateUID:
                                  description: UID is a type that holds unique ID
                                    values, including UUIDs.  Because we don't ONLY
                                    use UUIDs, this is an alias to string.  Being
                                    a type captures intent and helps make sure that
                                    UIDs and names do not get conflated.
                                  type: string
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
                subresources:
                  status: {}
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: expansiontemplatepodstatuses.status.gatekeeper.sh
            spec:
              group: status.gatekeeper.sh
              names:
                kind: ExpansionTemplatePodStatus
                listKind: ExpansionTemplatePodStatusList
                plural: expansiontemplatepodstatuses
                singular: expansiontemplatepodstatus
              preserveUnknownFields: false
              scope: Namespaced
              versions:
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: ExpansionTemplatePodStatus is the Schema for the
                      expansiontemplatepodstatuses API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      status:
                        description: ExpansionTemplatePodStatusStatus defines the
                          observed state of ExpansionTemplatePodStatus.
                        properties:
                          errors:
                            items:
                              properties:
                                message:
                                  type: string
                                type:
                                  type: string
                              required:
                              - message
                              type: object
                            type: array
                          id:
                            description: 'Important: Run "make" to regenerate code
                              after modifying this file'
                            type: string
                          observedGeneration:
                            format: int64
                            type: integer
                          operations:
                            items:
                              type: string
                            type: array
                          templateUID:
                            description: UID is a type that holds unique ID values,
                              including UUIDs.  Because we don't ONLY use UUIDs, this
                              is an alias to string.  Being a type captures intent
                              and helps make sure that UIDs and names do not get conflated.
                            type: string
                        type: object
                    type: object
                served: true
                storage: true
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: modifyset.mutations.gatekeeper.sh
            spec:
              group: mutations.gatekeeper.sh
              names:
                kind: ModifySet
                listKind: ModifySetList
                plural: modifyset
                singular: modifyset
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - name: v1
                schema:
                  openAPIV3Schema:
                    description: ModifySet allows the user to modify non-keyed lists,
                      such as the list of arguments to a container.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        properties:
                          name:
                            maxLength: 63
                            type: string
                        type: object
                      spec:
                        description: ModifySetSpec defines the desired state of ModifySet.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main].args`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              operation:
                                default: merge
                                description: Operation describes whether values should
                                  be merged in ("merge"), or pruned ("prune"). Default
                                  value is "merge"
                                enum:
                                - merge
                                - prune
                                type: string
                              pathTests:
                                description: PathTests are a series of existence tests
                                  that can be checked before a mutation is applied
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                              values:
                                description: Values describes the values provided
                                  to the operation as `values.fromList`.
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                            type: object
                        type: object
                      status:
                        description: ModifySetStatus defines the observed state of
                          ModifySet.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
                subresources:
                  status: {}
              - name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: ModifySet allows the user to modify non-keyed lists,
                      such as the list of arguments to a container.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ModifySetSpec defines the desired state of ModifySet.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main].args`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              operation:
                                default: merge
                                description: Operation describes whether values should
                                  be merged in ("merge"), or pruned ("prune"). Default
                                  value is "merge"
                                enum:
                                - merge
                                - prune
                                type: string
                              pathTests:
                                description: PathTests are a series of existence tests
                                  that can be checked before a mutation is applied
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                              values:
                                description: Values describes the values provided
                                  to the operation as `values.fromList`.
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                            type: object
                        type: object
                      status:
                        description: ModifySetStatus defines the observed state of
                          ModifySet.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: ModifySet allows the user to modify non-keyed lists,
                      such as the list of arguments to a container.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: ModifySetSpec defines the desired state of ModifySet.
                        properties:
                          applyTo:
                            description: ApplyTo lists the specific groups, versions
                              and kinds a mutation will be applied to. This is necessary
                              because every mutation implies part of an object schema
                              and object schemas are associated with specific GVKs.
                            items:
                              description: ApplyTo determines what GVKs items the
                                mutation should apply to. Globs are not allowed.
                              properties:
                                groups:
                                  items:
                                    type: string
                                  type: array
                                kinds:
                                  items:
                                    type: string
                                  type: array
                                versions:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                          location:
                            description: 'Location describes the path to be mutated,
                              for example: `spec.containers[name: main].args`.'
                            type: string
                          match:
                            description: Match allows the user to limit which resources
                              get mutated. Individual match criteria are AND-ed together.
                              An undefined match criteria matches everything.
                            properties:
                              excludedNamespaces:
                                description: 'ExcludedNamespaces is a list of namespace
                                  names. If defined, a constraint only applies to
                                  resources not in a listed namespace. ExcludedNamespaces
                                  also supports a prefix or suffix based glob.  For
                                  example, `excludedNamespaces: [kube-*]` matches
                                  both `kube-system` and `kube-public`, and `excludedNamespaces:
                                  [*-system]` matches both `kube-system` and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              kinds:
                                items:
                                  description: Kinds accepts a list of objects with
                                    apiGroups and kinds fields that list the groups/kinds
                                    of objects to which the mutation will apply. If
                                    multiple groups/kinds objects are specified, only
                                    one match is needed for the resource to be in
                                    scope.
                                  properties:
                                    apiGroups:
                                      description: APIGroups is the API groups the
                                        resources belong to. '*' is all groups. If
                                        '*' is present, the length of the slice must
                                        be one. Required.
                                      items:
                                        type: string
                                      type: array
                                    kinds:
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                type: array
                              labelSelector:
                                description: 'LabelSelector is the combination of
                                  two optional fields: `matchLabels` and `matchExpressions`.  These
                                  two fields provide different methods of selecting
                                  or excluding k8s objects based on the label keys
                                  and values included in object metadata.  All selection
                                  expressions from both sections are ANDed to determine
                                  if an object meets the cumulative requirements of
                                  the selector.'
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              name:
                                description: 'Name is the name of an object.  If defined,
                                  it will match against objects with the specified
                                  name.  Name also supports a prefix or suffix glob.  For
                                  example, `name: pod-*` would match both `pod-a`
                                  and `pod-b`, and `name: *-pod` would match both
                                  `a-pod` and `b-pod`.'
                                pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                type: string
                              namespaceSelector:
                                description: NamespaceSelector is a label selector
                                  against an object's containing namespace or the
                                  object itself, if the object is a namespace.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: 'Namespaces is a list of namespace names.
                                  If defined, a constraint only applies to resources
                                  in a listed namespace.  Namespaces also supports
                                  a prefix or suffix based glob.  For example, `namespaces:
                                  [kube-*]` matches both `kube-system` and `kube-public`,
                                  and `namespaces: [*-system]` matches both `kube-system`
                                  and `gatekeeper-system`.'
                                items:
                                  description: 'A string that supports globbing at
                                    its front or end. Ex: "kube-*" will match "kube-system"
                                    or "kube-public", "*-system" will match "kube-system"
                                    or "gatekeeper-system".  The asterisk is required
                                    for wildcard matching.'
                                  pattern: ^(\*|\*-)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\*|-\*)?$
                                  type: string
                                type: array
                              scope:
                                description: Scope determines if cluster-scoped and/or
                                  namespaced-scoped resources are matched.  Accepts
                                  `*`, `Cluster`, or `Namespaced`. (defaults to `*`)
                                type: string
                              source:
                                description: Source determines whether generated or
                                  original resources are matched. Accepts `Generated`|`Original`|`All`
                                  (defaults to `All`). A value of `Generated` will
                                  only match generated resources, while `Original`
                                  will only match regular resources.
                                enum:
                                - All
                                - Generated
                                - Original
                                type: string
                            type: object
                          parameters:
                            description: Parameters define the behavior of the mutator.
                            properties:
                              operation:
                                default: merge
                                description: Operation describes whether values should
                                  be merged in ("merge"), or pruned ("prune"). Default
                                  value is "merge"
                                enum:
                                - merge
                                - prune
                                type: string
                              pathTests:
                                description: PathTests are a series of existence tests
                                  that can be checked before a mutation is applied
                                items:
                                  description: "PathTest allows the user to customize
                                    how the mutation works if parent paths are missing.
                                    It traverses the list in order. All sub paths
                                    are tested against the provided condition, if
                                    the test fails, the mutation is not applied. All
                                    `subPath` entries must be a prefix of `location`.
                                    Any glob characters will take on the same value
                                    as was used to expand the matching glob in `location`.
                                    \n Available Tests: * MustExist    - the path
                                    must exist or do not mutate * MustNotExist - the
                                    path must not exist or do not mutate."
                                  properties:
                                    condition:
                                      description: Condition describes whether the
                                        path either MustExist or MustNotExist in the
                                        original object
                                      enum:
                                      - MustExist
                                      - MustNotExist
                                      type: string
                                    subPath:
                                      type: string
                                  type: object
                                type: array
                              values:
                                description: Values describes the values provided
                                  to the operation as `values.fromList`.
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                            type: object
                        type: object
                      status:
                        description: ModifySetStatus defines the observed state of
                          ModifySet.
                        properties:
                          byPod:
                            items:
                              description: MutatorPodStatusStatus defines the observed
                                state of MutatorPodStatus.
                              properties:
                                enforced:
                                  type: boolean
                                errors:
                                  items:
                                    description: MutatorError represents a single
                                      error caught while adding a mutator to a system.
                                    properties:
                                      message:
                                        type: string
                                      type:
                                        description: Type indicates a specific class
                                          of error for use by controller code. If
                                          not present, the error should be treated
                                          as not matching any known type.
                                        type: string
                                    required:
                                    - message
                                    type: object
                                  type: array
                                id:
                                  type: string
                                mutatorUID:
                                  description: Storing the mutator UID allows us to
                                    detect drift, such as when a mutator has been
                                    recreated after its CRD was deleted out from under
                                    it, interrupting the watch
                                  type: string
                                observedGeneration:
                                  format: int64
                                  type: integer
                                operations:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                served: true
                storage: false
                subresources:
                  status: {}
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.10.0
              labels:
                gatekeeper.sh/system: "yes"
              name: mutatorpodstatuses.status.gatekeeper.sh
            spec:
              group: status.gatekeeper.sh
              names:
                kind: MutatorPodStatus
                listKind: MutatorPodStatusList
                plural: mutatorpodstatuses
                singular: mutatorpodstatus
              preserveUnknownFields: false
              scope: Namespaced
              versions:
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: MutatorPodStatus is the Schema for the mutationpodstatuses
                      API.
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      status:
                        description: MutatorPodStatusStatus defines the observed state
                          of MutatorPodStatus.
                        properties:
                          enforced:
                            type: boolean
                          errors:
                            items:
                              description: MutatorError represents a single error
                                caught while adding a mutator to a system.
                              properties:
                                message:
                                  type: string
                                type:
                                  description: Type indicates a specific class of
                                    error for use by controller code. If not present,
                                    the error should be treated as not matching any
                                    known type.
                                  type: string
                              required:
                              - message
                              type: object
                            type: array
                          id:
                            type: string
                          mutatorUID:
                            description: Storing the mutator UID allows us to detect
                              drift, such as when a mutator has been recreated after
                              its CRD was deleted out from under it, interrupting
                              the watch
                            type: string
                          observedGeneration:
                            format: int64
                            type: integer
                          operations:
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                served: true
                storage: true
        - complianceType: musthave
          objectDefinition:
            apiVersion: apiextensions.k8s.io/v1
            kind: CustomResourceDefinition
            metadata:
              annotations:
                controller-gen.kubebuilder.io/version: v0.11.3
              labels:
                gatekeeper.sh/system: "yes"
              name: providers.externaldata.gatekeeper.sh
            spec:
              group: externaldata.gatekeeper.sh
              names:
                kind: Provider
                listKind: ProviderList
                plural: providers
                singular: provider
              preserveUnknownFields: false
              scope: Cluster
              versions:
              - deprecated: true
                deprecationWarning: externaldata.gatekeeper.sh/v1alpha1 is deprecated.
                  Use externaldata.gatekeeper.sh/v1beta1 instead.
                name: v1alpha1
                schema:
                  openAPIV3Schema:
                    description: Provider is the Schema for the Provider API
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: Spec defines the Provider specifications.
                        properties:
                          caBundle:
                            description: CABundle is a base64-encoded string that
                              contains the TLS CA bundle in PEM format. It is used
                              to verify the signature of the provider's certificate.
                            type: string
                          timeout:
                            description: Timeout is the timeout when querying the
                              provider.
                            type: integer
                          url:
                            description: URL is the url for the provider. URL is prefixed
                              with https://.
                            type: string
                        type: object
                    type: object
                served: true
                storage: false
              - name: v1beta1
                schema:
                  openAPIV3Schema:
                    description: Provider is the Schema for the providers API
                    properties:
                      apiVersion:
                        description: 'APIVersion defines the versioned schema of this
                          representation of an object. Servers should convert recognized
                          schemas to the latest internal value, and may reject unrecognized
                          values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                        type: string
                      kind:
                        description: 'Kind is a string value representing the REST
                          resource this object represents. Servers may infer this
                          from the endpoint the client submits requests to. Cannot
                          be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      metadata:
                        type: object
                      spec:
                        description: Spec defines the Provider specifications.
                        properties:
                          caBundle:
                            description: CABundle is a base64-encoded string that
                              contains the TLS CA bundle in PEM format. It is used
                              to verify the signature of the provider's certificate.
                            type: string
                          timeout:
                            description: Timeout is the timeout when querying the
                              provider.
                            type: integer
                          url:
                            description: URL is the url for the provider. URL is prefixed
                              with https://.
                            type: string
                        type: object
                    type: object
                served: true
                storage: true
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-admin
              namespace: gatekeeper-system
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              creationTimestamp: null
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-manager-role
              namespace: gatekeeper-system
            rules:
            - apiGroups:
              - ""
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - ""
              resources:
              - secrets
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              creationTimestamp: null
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-manager-role
            rules:
            - apiGroups:
              - ""
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - '*'
              resources:
              - '*'
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - admissionregistration.k8s.io
              resourceNames:
              - gatekeeper-mutating-webhook-configuration
              resources:
              - mutatingwebhookconfigurations
              verbs:
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - apiextensions.k8s.io
              resources:
              - customresourcedefinitions
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - config.gatekeeper.sh
              resources:
              - configs
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - config.gatekeeper.sh
              resources:
              - configs/status
              verbs:
              - get
              - patch
              - update
            - apiGroups:
              - constraints.gatekeeper.sh
              resources:
              - '*'
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - expansion.gatekeeper.sh
              resources:
              - '*'
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - externaldata.gatekeeper.sh
              resources:
              - providers
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - mutations.gatekeeper.sh
              resources:
              - '*'
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - policy
              resourceNames:
              - gatekeeper-admin
              resources:
              - podsecuritypolicies
              verbs:
              - use
            - apiGroups:
              - status.gatekeeper.sh
              resources:
              - '*'
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - templates.gatekeeper.sh
              resources:
              - constrainttemplates
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
            - apiGroups:
              - templates.gatekeeper.sh
              resources:
              - constrainttemplates/finalizers
              verbs:
              - delete
              - get
              - patch
              - update
            - apiGroups:
              - templates.gatekeeper.sh
              resources:
              - constrainttemplates/status
              verbs:
              - get
              - patch
              - update
            - apiGroups:
              - admissionregistration.k8s.io
              resourceNames:
              - gatekeeper-validating-webhook-configuration
              resources:
              - validatingwebhookconfigurations
              verbs:
              - create
              - delete
              - get
              - list
              - patch
              - update
              - watch
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-manager-rolebinding
              namespace: gatekeeper-system
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: gatekeeper-manager-role
            subjects:
            - kind: ServiceAccount
              name: gatekeeper-admin
              namespace: gatekeeper-system
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-manager-rolebinding
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: gatekeeper-manager-role
            subjects:
            - kind: ServiceAccount
              name: gatekeeper-admin
              namespace: gatekeeper-system
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-webhook-server-cert
              namespace: gatekeeper-system
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Service
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-webhook-service
              namespace: gatekeeper-system
            spec:
              ports:
              - name: https-webhook-server
                port: 443
                targetPort: webhook-server
              selector:
                control-plane: controller-manager
                gatekeeper.sh/operation: webhook
                gatekeeper.sh/system: "yes"
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                control-plane: audit-controller
                gatekeeper.sh/operation: audit
                gatekeeper.sh/system: "yes"
              name: gatekeeper-audit
              namespace: gatekeeper-system
            spec:
              replicas: 1
              selector:
                matchLabels:
                  control-plane: audit-controller
                  gatekeeper.sh/operation: audit
                  gatekeeper.sh/system: "yes"
              template:
                metadata:
                  labels:
                    control-plane: audit-controller
                    gatekeeper.sh/operation: audit
                    gatekeeper.sh/system: "yes"
                spec:
                  automountServiceAccountToken: true
                  containers:
                  - args:
                    - --operation=audit
                    - --operation=status
                    - --operation=mutation-status
                    - --logtostderr
                    - --disable-opa-builtin={http.send}
                    - --disable-cert-rotation
                    command:
                    - /manager
                    env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          apiVersion: v1
                          fieldPath: metadata.namespace
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: NAMESPACE
                      valueFrom:
                        fieldRef:
                          apiVersion: v1
                          fieldPath: metadata.namespace
                    - name: CONTAINER_NAME
                      value: manager
                    image: openpolicyagent/gatekeeper:v3.13.0-beta.1
                    imagePullPolicy: Always
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 9090
                    name: manager
                    ports:
                    - containerPort: 8888
                      name: metrics
                      protocol: TCP
                    - containerPort: 9090
                      name: healthz
                      protocol: TCP
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 9090
                    resources:
                      limits:
                        memory: 512Mi
                      requests:
                        cpu: 100m
                        memory: 512Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - ALL
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                      seccompProfile:
                        type: RuntimeDefault
                    volumeMounts:
                    - mountPath: /certs
                      name: cert
                      readOnly: true
                    - mountPath: /tmp/audit
                      name: tmp-volume
                  nodeSelector:
                    kubernetes.io/os: linux
                  priorityClassName: system-cluster-critical
                  serviceAccountName: gatekeeper-admin
                  terminationGracePeriodSeconds: 60
                  volumes:
                  - name: cert
                    secret:
                      defaultMode: 420
                      secretName: gatekeeper-webhook-server-cert
                  - emptyDir: {}
                    name: tmp-volume
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                control-plane: controller-manager
                gatekeeper.sh/operation: webhook
                gatekeeper.sh/system: "yes"
              name: gatekeeper-controller-manager
              namespace: gatekeeper-system
            spec:
              replicas: 3
              selector:
                matchLabels:
                  control-plane: controller-manager
                  gatekeeper.sh/operation: webhook
                  gatekeeper.sh/system: "yes"
              template:
                metadata:
                  labels:
                    control-plane: controller-manager
                    gatekeeper.sh/operation: webhook
                    gatekeeper.sh/system: "yes"
                spec:
                  affinity:
                    podAntiAffinity:
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - key: gatekeeper.sh/operation
                              operator: In
                              values:
                              - webhook
                          topologyKey: kubernetes.io/hostname
                        weight: 100
                  automountServiceAccountToken: true
                  containers:
                  - args:
                    - --port=8443
                    - --logtostderr
                    - --exempt-namespace=gatekeeper-system
                    - --operation=webhook
                    - --operation=mutation-webhook
                    - --disable-opa-builtin={http.send}
                    command:
                    - /manager
                    env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          apiVersion: v1
                          fieldPath: metadata.namespace
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: NAMESPACE
                      valueFrom:
                        fieldRef:
                          apiVersion: v1
                          fieldPath: metadata.namespace
                    - name: CONTAINER_NAME
                      value: manager
                    image: openpolicyagent/gatekeeper:v3.13.0-beta.1
                    imagePullPolicy: Always
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 9090
                    name: manager
                    ports:
                    - containerPort: 8443
                      name: webhook-server
                      protocol: TCP
                    - containerPort: 8888
                      name: metrics
                      protocol: TCP
                    - containerPort: 9090
                      name: healthz
                      protocol: TCP
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 9090
                    resources:
                      limits:
                        memory: 512Mi
                      requests:
                        cpu: 100m
                        memory: 512Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - ALL
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                      seccompProfile:
                        type: RuntimeDefault
                    volumeMounts:
                    - mountPath: /certs
                      name: cert
                      readOnly: true
                  nodeSelector:
                    kubernetes.io/os: linux
                  priorityClassName: system-cluster-critical
                  serviceAccountName: gatekeeper-admin
                  terminationGracePeriodSeconds: 60
                  volumes:
                  - name: cert
                    secret:
                      defaultMode: 420
                      secretName: gatekeeper-webhook-server-cert
        - complianceType: musthave
          objectDefinition:
            apiVersion: policy/v1
            kind: PodDisruptionBudget
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-controller-manager
              namespace: gatekeeper-system
            spec:
              minAvailable: 1
              selector:
                matchLabels:
                  control-plane: controller-manager
                  gatekeeper.sh/operation: webhook
                  gatekeeper.sh/system: "yes"
        - complianceType: musthave
          objectDefinition:
            apiVersion: admissionregistration.k8s.io/v1
            kind: MutatingWebhookConfiguration
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-mutating-webhook-configuration
            webhooks:
            - admissionReviewVersions:
              - v1
              - v1beta1
              clientConfig:
                service:
                  name: gatekeeper-webhook-service
                  namespace: gatekeeper-system
                  path: /v1/mutate
              failurePolicy: Ignore
              matchPolicy: Exact
              name: mutation.gatekeeper.sh
              namespaceSelector:
                matchExpressions:
                - key: admission.gatekeeper.sh/ignore
                  operator: DoesNotExist
                - key: kubernetes.io/metadata.name
                  operator: NotIn
                  values:
                  - gatekeeper-system
              rules:
              - apiGroups:
                - '*'
                apiVersions:
                - '*'
                operations:
                - CREATE
                - UPDATE
                resources:
                - '*'
              sideEffects: None
              timeoutSeconds: 1
        - complianceType: musthave
          objectDefinition:
            apiVersion: admissionregistration.k8s.io/v1
            kind: ValidatingWebhookConfiguration
            metadata:
              labels:
                gatekeeper.sh/system: "yes"
              name: gatekeeper-validating-webhook-configuration
            webhooks:
            - admissionReviewVersions:
              - v1
              - v1beta1
              clientConfig:
                service:
                  name: gatekeeper-webhook-service
                  namespace: gatekeeper-system
                  path: /v1/admit
              failurePolicy: Ignore
              matchPolicy: Exact
              name: validation.gatekeeper.sh
              namespaceSelector:
                matchExpressions:
                - key: admission.gatekeeper.sh/ignore
                  operator: DoesNotExist
                - key: kubernetes.io/metadata.name
                  operator: NotIn
                  values:
                  - gatekeeper-system
              rules:
              - apiGroups:
                - '*'
                apiVersions:
                - '*'
                operations:
                - CREATE
                - UPDATE
                resources:
                - '*'
                - pods/ephemeralcontainers
                - pods/exec
                - pods/log
                - pods/eviction
                - pods/portforward
                - pods/proxy
                - pods/attach
                - pods/binding
                - deployments/scale
                - replicasets/scale
                - statefulsets/scale
                - replicationcontrollers/scale
                - services/proxy
                - nodes/proxy
                - services/status
              sideEffects: None
              timeoutSeconds: 3
            - admissionReviewVersions:
              - v1
              - v1beta1
              clientConfig:
                service:
                  name: gatekeeper-webhook-service
                  namespace: gatekeeper-system
                  path: /v1/admitlabel
              failurePolicy: Fail
              matchPolicy: Exact
              name: check-ignore-label.gatekeeper.sh
              namespaceSelector:
                matchExpressions:
                - key: kubernetes.io/metadata.name
                  operator: NotIn
                  values:
                  - gatekeeper-system
              rules:
              - apiGroups:
                - ""
                apiVersions:
                - '*'
                operations:
                - CREATE
                - UPDATE
                resources:
                - namespaces
              sideEffects: None
              timeoutSeconds: 3
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
