apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: virtualmachineaccess
spec:
  crd:
    spec:
      names:
        kind: VirtualMachineAccess
      validation:
        openAPIV3Schema:
          properties:
            allowedBindings:
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                  group:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package virtualmachineaccess

        # Ensure that every VirtualMachine has a valid 'environment' label
        violation[{"msg": msg}] {
          input.review.kind.kind == "VirtualMachine"

          labels := input.review.object.metadata.labels
          not labels.environment
          msg := "VirtualMachine resource must have an 'environment' label."
        }

        # Ensure access is allowed for the requesting user's group
        violation[{"msg": msg}] {
          input.review.kind.kind == "VirtualMachine"

          # Extract the 'environment' label from the resource
          environment := input.review.object.metadata.labels.environment
          
          # Extract user groups
          user_groups := input.review.userInfo.groups

          # Check if at least one allowed binding matches the environment and user group
          not any_allowed_binding_matches(environment, user_groups)
          msg := sprintf("Access denied. No matching binding for environment '%s' and user groups '%s'.", [environment, user_groups])
        }

        # Helper function: checks if any binding matches the given environment and user groups
        any_allowed_binding_matches(environment, user_groups) {
          some i
          binding := input.parameters.allowedBindings[i]
          binding.label == environment
          binding.group in user_groups
        }
