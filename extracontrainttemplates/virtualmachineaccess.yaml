apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: virtualmachineaccess
spec:
  crd:
    spec:
      names:
        kind: VirtualMachineAccess
      validation:
        openAPIV3Schema:
          properties:
            allowedBindings:
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                  group:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package virtualmachineaccess

        violation[{"msg": msg}] {
          input.review.kind.kind == "VirtualMachine"

          # Extract labels and user groups
          labels := input.review.object.metadata.labels
          groups := input.review.userInfo.groups

          # Ensure the environment label exists
          not labels.environment
          msg := "VirtualMachine resource must have an 'environment' label."
        }

        violation[{"msg": msg}] {
          input.review.kind.kind == "VirtualMachine"

          # Extract labels and user groups
          environment := input.review.object.metadata.labels.environment
          groups := input.review.userInfo.groups

          # Check if a valid binding exists
          some i
          binding := input.parameters.allowedBindings[i]
          binding.label == environment
          binding.group in groups

          # If no valid binding exists, raise a violation
          not some i {
            binding := input.parameters.allowedBindings[i]
            binding.label == environment
            binding.group in groups
          }
          msg := sprintf("Access denied: group '%v' cannot access environment '%v'", [groups, environment])
        }
